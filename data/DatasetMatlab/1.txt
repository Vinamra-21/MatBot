
What This Issue Means
Try This Workaround
Related Topics
External Websites
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Vector CANape Operation

A third-party calibration tool (Vector CANape®) is not working with the real-time application.

What This Issue Means

You can use the Vector CANape tool to view signals and tune parameters in the real-time application. For more information, see the steps in Prepare ASAP2 Data Description File. In addition to the limitations listed in Vector CANape Limitations, there are various issues that can prevent the operation of this tool.

Try This Workaround

For Vector CANape tool issues, try these workarounds.

Simulation Data Inspector in Use

Simulation Data Inspector and the third-party calibration tools (Vector CANape and ETAS® Inca) are mutually exclusive. If you use the Simulation Data Inspector to view signal data, you cannot use the calibration tools. If you use the calibration tools, you cannot use the Simulation Data Inspector to view signal data.

Client Cannot Connect

Check the IP address of the Speedgoat® target computer associated with the model and compare it to the address stored in the ASAP2 file.

ASAP2 File Out of Date

When you rebuild a Simulink® Real-Time™ application, update the ASAP2 file loaded in the calibration tool with the new version of the file. The ASAP2 file is valid only until the next time that you build the application.

Related Topics
Prepare ASAP2 Data Description File
Vector CANape Limitations
External Websites
MathWorks Help Center website
www.vector.com

-----------------------------------------------------------------------------------------------


What This Issue Means
Try This Workaround
See Also
Related Examples
More About
External Websites
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Unsatisfactory Real-Time Performance

I want some recommended methods to improve unsatisfactory real-time application performance.

What This Issue Means

Run-time performance and reduce the task execution time (TET) of a model depend on model design, Speedgoat® target computer capacity, and target computer utilization.

Try This Workaround

You can improve run-time performance and reduce the task execution time (TET) of a model with these methods.

Enable Compile with GCC -ffast-math Option

The Compile with GCC -ffast-math option enables the GCC compiler -ffast-math option when compiling real-time application code. This option is disabled by default for Simulink® Real-Time™ models.

By enabling the Compile with GCC -ffast-math option, you provide the compiler with more flexibility to optimize floating-point math at the expense of deviating from the IEEE-754 floating-point standard.

For more information about the -ffast-math option, see the Semantics of Floating-Point Math in GCC and gcc.gnu.org/wiki/FloatingPointMath/.

Run Performance Tools

Use these performance tools:

To profile execution of a real-time application , use the startProfiler command.

To run the profiler and plot the results, use the plot function.

For more information, see Execution Profiling for Real-Time Applications.

Customize Concurrent Execution on Multicore Target Computer

You can improve run-time performance by configuring your model to take advantage of your multicore target computer:

Partition the model into subsystems according to the physical requirements of the system that you are modeling. Set the block sample rates within each subsystem to the slowest rate that meets the physical requirements of the system.

Create execution tasks and triggers, and then explicitly assign subsystem partitions to the tasks. See Partition Your Model Using Explicit Partitioning and Multicore Programming with Simulink.

You can also use the Simulink Schedule Editor to partition the model. In the Simulink Editor, click the Modeling tab and select Design > Schedule Editor. For more information, see Create Partitions from a Rate-Based Model.

Run the real-time application.

Note

Do not use MATLAB System blocks in the top level of Simulink Real-Time models in which task execution is explicitly partitioned. These blocks generate a TLC error when building the real-time application, for example:

"Unable to find TLCBlockSID within the Block scope"
Minimize the Model

You can improve run-time performance by minimizing your model to make more memory and CPU cycles available for the real-time application:

On the Solver pane, increase Fixed-step size (fundamental sample time). Executing with a short sample time can overload the CPU.

Use polling mode. See Execution Modes for Real-Time Applications.

Reduce the number of I/O channels in the model.

Contact Technical Support

For additional guidance, refer to these sources:

MathWorks® Tech Support: MathWorks Help Center website

MATLAB® Answers: www.mathworks.com/matlabcentral/answers/?term=Simulink+Real-Time

MATLAB Central: www.mathworks.com/matlabcentral

For Speedgoat hardware issues, contact Speedgoat Tech Support: www.speedgoat.com/knowledge-center.

See Also

Compile with GCC -ffast-math

Related Examples
Concurrent Execution on Simulink Real-Time
More About
Execution Profiling for Real-Time Applications
Partition Your Model Using Explicit Partitioning
Execution Modes for Real-Time Applications
Find Simulink Real-Time Support
Multicore Programming with Simulink
External Websites
MathWorks Help Center website
www.speedgoat.com/products-services
www.speedgoat.com/knowledge-center
gcc.gnu.org/wiki/FloatingPointMath/

--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
Related Topics
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot System Upgrade for R2020b

After upgrading Simulink Real-Time software to R2020b and installing the Simulink Real-Time Target Support Package, the system cannot download real-time applications to the target computer.

What This Issue Means

The upgrade for release R2020b requires software upgrades to the Simulink Real-Time software and the Speedgoat Target Machine software.

Try This Workaround

In R2020b, the change to a 64-bit POSIX compliant real-time operating system on the target computer requires a software upgrade for your Speedgoat® real-time target machine. For this upgrade, the Speedgoat I/O Blockset provides an interactive tool. To retain compatibility with previous versions of MATLAB, you can choose to upgrade the target machine to a dual-boot system where you can select the operating system at startup. Or, you can upgrade the target machine to use only the new operating system. For the upgrade, you need a USB drive and the target machine needs a keyboard and a monitor.

To upgrade your software:

Install Simulink Real-Time and other required products.

Install the Simulink Real-Time Target Support Package by using the MATLAB Add-Ons menu.

​Install the Speedgoat I/O Blockset. Go to the Speedgoat customer portal.

To start the target machine upgrade, in the MATLAB Command Window, type:

speedgoat.migrateTarget

For more information, go to the Speedgoat website.

Related Topics
Troubleshoot Model Upgrade for R2020b
--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
See Also
Related Topics
External Websites
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Signals Not Accessible by Name

Some signal types cannot be logged or streamed in the real-time application.

What This Issue Means

You cannot log or stream by name these types of signals in the real-time application:

Virtual or bus signals (including signals from bus creator blocks and virtual blocks). For example, assume that you connect the output of a Mux block (a virtual block) to a Simulink® Scope block. The Scope block displays the names of the Mux input signals rather than the names of the Mux output signals.

Signals that Simulink optimizes away after you set the Signal storage reuse or Block reduction configuration parameters.

The output of a block that was optimized away is replaced with the corresponding input signal to the block. To access these signals, make them test points.

Signals of complex or multiword data types.

If a block name consists only of spaces, Simulink Real-Time™ Explorer does not display a node for signals from that block. To reference such a block:

Provide an alphanumeric name for the block.

Rebuild and download the model to the Speedgoat® target computer.

Reconnect the MATLAB® session to the target computer.

Try This Workaround

Check these signal types are not being logged or streamed by name in the real-time application::

Virtual or bus signals (including signals from bus creator blocks and virtual blocks)

Signals that Simulink optimizes away

Signals of complex or multiword data types

Blocks without alphanumeric names

See Also

Gain

Related Topics
Nonvirtual and Virtual Blocks
Composite Interface Guidelines
Signal storage reuse
Block reduction
Troubleshoot Parameters Not Accessible by Name
Internationalization Issues for Simulink Real-Time
External Websites
MathWorks Help Center website

--------------------------------------------------------------------------------------------------

What This Issue Means
Try These Workarounds
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Signals for Streaming or File Logging

There are signals selected for streaming or connected to File Log blocks in a model that generate an error that includes the text:

Unable stream signal signal_name.

What This Issue Means

This error message for signals selected for streaming or connected to File Log blocks could indicate that the signal has one or more of these issues:

The signal is not available in application.

The signal does not use globally accessible memory in application.

The signal connects to a Send/MessageSend block.

The signal has inherited sample time.

The signal is discontiguous.

Try These Workarounds

The workarounds for these issues vary. Try these.

Workaround for Signal Not Available

Make sure that these signal types are not being logged or streamed by name in the real-time application:

Virtual or bus signals (including signals from bus creator blocks and virtual blocks)

Signals that Simulink optimizes away

Signals of complex or multiword data types

Blocks without alphanumeric names

Workaround for Signal Not Global Available or Discontiguous Signal

To resolve, try inserting a Signal Copy block (a Signal Conversion block in Signal Copy mode) into the signals that you want to stream. Log the copied signal output instead. If you use a Dashboard block, connect it to the output signal of the Signal Copy block.

Workaround for Signal Connected to Message Block

To resolve, try streaming or file logging the input signal to the Send/MessageSend block. The output of the block (a message) cannot be streamed or logged.

Workaround for Signal Has Inherited Sample Time

To resolve, change the signal sample time from inherited to a value. Signals with inherited sample time cannot be streamed or logged.

--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
See Also
Related Examples
More About
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Signal Data Logging from Send and Receive Blocks

A model uses Send and Receive blocks. It would be helpful to view signal data from the message line (output of send or input of receive) in the Simulation Data Inspector. Unexpected data appears when a message line in Simulink Real-Time Explorer is selected for streaming to the Simulation Data Inspector.

What This Issue Means

There are some guidelines to data logging message line signals:

Message line signals that are marked for logging with the Simulation Data Inspector display the data accurately in the Simulation Data Inspector.

Message line signals that are connected to File Log blocks display the data accurately in the Simulation Data Inspector.

Message line signals that are selected for dynamic streaming with an instrument object—either by selecting the signals in Simulink Real-Time Explorer or adding the signals by using the Application object API—do not display the data accurately in the Simulation Data Inspector or in App Designer instrument panel applications.

For more information about message lines, see Animate and Understand Sending and Receiving Messages.

Try This Workaround

To get accurate display of message line signals in the Simulation Data Inspector, mark the signals for data logging in the model or connect the signals to File Log blocks.

See Also

File Log

Related Examples
Animate and Understand Sending and Receiving Messages
More About
Post-Process Real-time Signals Streamed to the Simulation Data Inspector
--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
See Also
Related Examples
More About
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Signal Data Logging from Nonvirtual Bus, Fixed-Point, and Multidimensional Signals

Some models use signals in nonvirtual buses, signals with fixed-point data types, and multidimensional signals that have a number of dimensions greater than two. It would be helpful to view signal data from these signals in the Simulation Data Inspector. The data for these signals is not visible when they are selected in Simulink Real-Time Explorer for streaming to the Simulation Data Inspector.

What This Issue Means

There are some guidelines to data logging signals in nonvirtual buses, signals with fixed-point data types, and multidimensional signals that have a number of dimensions greater than two:

When these signals are marked for logging with the Simulation Data Inspector, the signal data displays in the Simulation Data Inspector.

When these signals are connected to File Log blocks, the signal data displays in the Simulation Data Inspector.

When these signals are selected for dynamic streaming with an instrument object—either by selecting the signals in Simulink Real-Time Explorer or adding the signals by using the Application object API, the signal data does not display in the Simulation Data Inspector or in App Designer instrument panel applications.

Try This Workaround

There are workarounds to get signals in nonvirtual buses, signals with fixed-point data types, and mutidimensional signals (that have a number of dimensions greater than two) to display in the Simulation Data Inspector.

Signals in Nonvirtual Buses

To get signals in nonvirtual buses to display in the Simulation Data Inspector, mark the signals for data logging in the model or connect the signals to File Log blocks.

To instrument signals in nonvirtual buses to stream to an Instrument object, use the BusElement argument in the addSignal, connectLine, or connectScalar methods.

Signals with Fixed-Point Data Types

To get signals with fixed-point data types to display in the Simulation Data Inspector, mark the signals for data logging in the model or connect the signals to File Log blocks.

Multidimensional Signal

To get signals in multidimensional signals (that have a number of dimensions greater than two) to display in the Simulation Data Inspector, mark the signals for data logging in the model or connect the signals to File Log blocks.

See Also

Bus Creator | fixdt | addSignal | connectLine | connectScalar

Related Examples
Real-Time Signal Logging and Parameter Tuning
More About
Create Nonvirtual Buses Within Component
Fixed-Point Data in MATLAB and Simulink
Signal Basics
Variable-Size Signal Basics

--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
Related Examples
More About
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Signal Data Logging from Inport in Referenced Model

A model contains referenced models. The referenced models have root-inport signals that would be helpful to log and stream to the Simulation Data Inspector for visualization. When these signals are marked in the model for logging, a warning occurs in the diagnostic viewer when building the model:

Warning: Streaming to the SDI is not available for signal at
<sldiag objui="outport" objparam="1" objname="{'A/B',
'B/b1'}">output port 1</sldiag> of block '{'A/B', 'B/b1'}'.
Add a SignalCopy block at that port and instrument the
SignalCopy output port.
What This Issue Means

The warning message reports that the root-inport signals of referenced models are not available for streaming. Within top model A, the referenced model root inports that generate this warning message appear in referenced model A/B and referenced model A/B/C.

Top Model A

Referenced Model A/B

Referenced Model A/B/C

Try This Workaround

To instrument a root-inport signal in a referenced model and stream the signal to the Simulation Data Inspector, you can connect the signal to a Signal Conversion block that you configure as a Signal Copy block. Mark the output of the Signal Copy block for logging to the Simulation Data Inspector.

Related Examples
Log or Stream Real-Time Signals by Using the Simulation Data Inspector
More About
Real-Time Signal Logging and Streaming Basics

--------------------------------------------------------------------------------------------------
What This Issue Means
Try This Workaround
Related Topics
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Signal Data Logging from Inport in Referenced Model in Test Harness

A Simulink® Test™ test harness is available for a Simulink Real-Time™ model. The model has a referenced model that contains an inport whose signal are marked for data logging in the Simulation Data Inspector. During testing, this error occurs:

Warning: Streaming to the SDI is not available for signal at
<sldiag objui="outport" objparam="1"
objname="{'Example_Harness1/Example', 'Example/Input'}">output
port 1</sldiag> of block '{'Example_Harness1/Example',
'Example/Input'}'. Add a SignalCopy block at that port and
instrument the SignalCopy output port.
What This Issue Means

It is not possible to stream signal data from the referenced model inport for logging from within the test harness.

Try This Workaround

Mark the input signals to the model block for logging. This model provides an example workaround. For more information, see the Simulink Test documentation.

--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
Related Topics
External Websites
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Parameters Not Accessible by Name

Some parameters cannot be observed or tuned in the real-time application.

What This Issue Means

Reasons that you cannot observe or tune some parameters in the real-time application are:

Simulink® Real-Time™ does not support parameters of multiword data types.

During execution, you cannot tune parameters that change the model structure, for example, by adding a port. To change these parameters, you must stop the execution, change the parameter, and rebuild the real-time application.

Try This Workaround

Check the parameters for the issues described in What This Issue Means.

Related Topics
Troubleshoot Signals Not Accessible by Name
Internationalization Issues for Simulink Real-Time

--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
See Also
Related Examples
More About
External Websites
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Overloaded CPU from Executing Real-Time Application

Some issue is producing a CPU overload when executing a real-time application.

What This Issue Means

A CPU overload indicates that the CPU is unable to complete processing a model time step before restarting for the next time step.

When this error occurs, the Simulink Real-Time RTOS halts model execution and the Target object property TargetStatus shows an error, for example:

mCPUOverload: Sub-rate exception: Overload limit (0) exceeded in 0.02s rate with 1 overloads

If you allow the overload, model execution continues until the allowed overload limit is reached. If the model continues to run after a CPU overload, the time step lasts as long as the time required to finish the execution. This behavior delays the next time step.

Model design or Speedgoat® target computer resources cause CPU overloads. Possible reasons are:

The target computer is too slow or the model sample time is too small.

The model is too complex (algorithmic complexity).

I/O latency, where each I/O channel used introduces latency into the system. I/O latency can cause the execution time to exceed the model time step.

To find latency values for Speedgoat boards, see www.speedgoat.com and select Products & Services > Services.

Try This Workaround

The Simulink® Real-Time™ RTOS usually halts model execution when it encounters a CPU overload. You can configure the Simulink Real-Time model to allow CPU overloads. Use this capability to support long initializations and for overload diagnosis. You also can try to reduce overloads by improving application performance and enabling the Compile with GCC -ffast-math option.

Permit Long Initialization Time

For some real-time applications, normal initialization can extend beyond the first sample time. Use the SLRT Overload Options block to increase the number of startup time steps to ignore overloads. By default, only the first time step ignores overloads.

Note

Allowing the target computer CPU to overload can cause incorrect results, especially for multirate models. Use the SLRT Overload Options block only for diagnosis. When your diagnosis is complete, turn off these options.

Enable Compile with GCC -ffast-math Option

The Compile with GCC -ffast-math option enables the GCC compiler -ffast-math option when compiling real-time application code. This option is disabled by default for Simulink Real-Time models.

By enabling the Compile with GCC -ffast-math option, you provide the compiler with more flexibility to optimize floating-point math at the expense of deviating from the IEEE-754 floating-point standard.

For more information about the -ffast-math option, see the Semantics of Floating-Point Math in GCC and gcc.gnu.org/wiki/FloatingPointMath/.

Force Polling Mode

The Force polling mode option enables polling mode — instead of interrupt-driven mode — for clocking the real-time application. Enabling this option can help reduce CPU overloads if:

The target computer has at least four CPU cores.

The CPU overload is caused by sporadic TET spikes.

See Also

Compile with GCC -ffast-math

Related Examples
Monitor CPU Overload Rate
More About
Target Computer CPU Overload

--------------------------------------------------------------------------------------------------
What This Issue Means
Try This Workaround
See Also
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Model Upgrade for R2020b

When building a pre-R2020b Simulink Real-Time models in R2020b, build errors occur. Some of the blocks in the model have the label Obsolete Simulink Real-Time Block.

What This Issue Means

For R2020b, you must upgrade the Simulink Real-Time model. A model Upgrade Advisor check is available to support this upgrade.

Try This Workaround

To upgrade your model for Simulink Real-Time R2020b features, use this software upgrade process:

Install Simulink Real-Time and other required products.

Install the Simulink Real-Time Target Support Package by using the MATLAB Add-Ons menu.

​Install the Speedgoat I/O Blockset. Go to the Speedgoat website.

Upgrade the target machine software. See Troubleshoot System Upgrade for R2020b.

Open a R2020b or earlier Simulink Real-Time model.

Run the Upgrade Advisor. On the Modeling tab, select Model Advisor > Upgrade Advisor.

In the Upgrade Advisor dialog box, select Check model for upgradable Simulink Real-Time features. Click the Run This Check button. The advisor lists the upgrades that it can apply and the upgrades that require manual changes.

After the check, click the Upgrade button. The advisor upgrades the model by applying all nonmanual changes.

Apply Manual Changes

When the Upgrade Advisor encounters model issues that it cannot resolve by using automated changes, the Upgrade Advisor reports these as Warning: Some of the features require manual changes. It is a good practice to copy the text of these warnings and save it for reference as you apply changes to your model.

Apply Speedgoat Utilities

In R2020b, Speedgoat® software provides support for configuring interrupts and Ethernet communications.

To configure model interrupts, use a single block from the Speedgoat I/O Blockset. You can use this block for asynchronous subsystems or for triggering the base rate of the model. The list of available interrupt sources reflects the Speedgoat I/O Blockset blocks configured in the model. For more information see the block documentation in speedgoatlib_utilities.

To configure additional Ethernet ports on the target machine, the Speedgoat I/O Blockset provides a tool to configure these Ethernet ports. The configuration is specific to the target machine and reflects the labeling on the front plates of the target machine. For more information, in the MATLAB Command Window, type:

speedgoat.configureEthernet
See Also

Troubleshoot System Upgrade for R2020b

--------------------------------------------------------------------------------------------------
What This Issue Means
Try This Workaround
See Also
Related Topics
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot MATLAB API Call Upgrade for R2020b

In R2020b, many objects and functions in the Simulink® Real-Time™ API changed.

What This Issue Means

MATLAB® m-scripts written by using the Simulink Real-Time API require updates to run in R2020b and later releases.

Try This Workaround

These tables identify Simulink Real-Time API changes in R2020 and identify new workflows. Use these tables to guide your updates to pre-R2020b m-scripts. For information about Simulink Real-Time in previous releases, see:

https://www.mathworks.com/help/doc-archives.html
Target Computer Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


slrealtime.Application object, ApplicationName property

slrealtime.target object, Application property

	

Get name of real-time application.

	

Changed name

	

Use Target object, Application property.




slrealtime.target object, Connected property value is 'Yes'.

	

Get communication status between development computer and target computers.

	

Changed name

	

Use Target object, Connected event.

Use connect function to make connection.




close function

	

Close connection between development and target computers.

	

Changed name

	

Use disconnect function to close connection.




getDiskSpace function

	

Get free space and total space on the drive, in bytes.

	

Moved to Speedgoat API

	

See the speedgoat.getDiskSpace function at www.speedgoat.com.




load function

	

Download real-time application to target computer.

	

Unchanged

	

Use load function after creating Target object. The real-time application is not automatically loaded as part of the build process.




reboot function

	

Restart target computer.

	

Unchanged

	

Use reboot function to restart target computer in standalone mode. Other, previously supported boot modes are not available.




saveparamset

	

Save a set of parameters to a real-time application

	

Changed name. Changed workflow.

	

Use saveParamSet to save the parameter set to a file.




loadparamset

	

Load a set of saved parameters to a real-time application

	

Changed name. Changed workflow.

	

Use importParamSet to Import the parameter set into a ParameterSet object on the development computer.

Real-Time Execution Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


slrealtime.target object, CPUoverload property

	

Get CPU overload status.

	

Changed name

	

Use Target object, TargetStatus property or ModelStatus property.




slrealtime.target object, AvgTET property

	

Get average task execution time.

	

Changed name

	

Use Target object, ModelStatus.TETInfo property.




slrealtime.target object, ExecTime property

	

Get real-time application execution time.

	

Changed name

	

Use Target object, ModelStatus.TETInfo property.




slrealtime.target object, MaxTET property

	

Get maximum task execution time.

	

Changed name

	

Use Target object, ModelStatus.TETInfo property.




slrealtime.target object, MinTET property

	

Get minimum task execution time.

	

Changed name

	

Use Target object, ModelStatus.TETInfo property.




slrealtime.target object, SampleTime property

	

Get time between samples (step size).

	

Changed name

	

Use Target object, ModelStatus.TETInfo.Rate property.




start function

	

Start execution of real-time application on target computer.

	

Changed workflow

	

Use start function to start real-time application and set real-time application options.




slrealtime.target object, Status property

	

Get execution status of real-time application.

	

Changed workflow

	

Use Target object, ModelStatus property or status function.




stop function

	

Stop execution of real-time application on target computer.

	

Unchanged

	

Use stop function.




slrealtime.target object, StopTime property

	

Get or set time when real-time application stops running.

	

Changed workflow

	

Get by using Target object, ModelStatus.StopTime property and set by using setStopTime function.




slrealtime.target object, TETLog property

	

Access storage in the MATLAB workspace for task execution time.

	

Changed workflow

	

Use slrtTETMonitor function.

Execution Profiler Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


getProfilerData function

	

Retrieve profile data object.

	

Unchanged

	

Use getProfilerData function. Start the execution profiler before you start the real-time application.




slrealtime.target object, ProfilerStatus property

	

Get state of profiler.

	

Changed workflow

	

Use Target object, Application property. There are added property values.




resetProfiler function

	

Reset profiling service state to Ready.

	

Unchanged

	

Use resetProfiler function. The profiler resets itself when you start the real-time application.




startProfiler function

	

Start profiling service on target computer.

	

Unchanged

	

Use startProfiler function. Start the execution profiler before you start the real-time application.




stopProfiler function

	

Stop profiling service on target computer.

	

Changed limitation

	

Use stopProfiler function. The profiler auto stop at 1GB is eliminated.

Parameter Tuning Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


setparam function

	

Change value of tunable parameter in real-time application.

	

Changed syntax

	

Use setparam function.




getparam function

	

Read value of observable parameter in real-time application.

	

Changed syntax

	

Use getparam function.




slrealtime.target object, NumParameters property

	

Get number of tunable parameters.

	

Changed workflow

	

Use Application object and getParameters function.




slrealtime.target object, Parameters property

	

Get list of tunable parameters.

	

Changed workflow

	

Use Application object and getParameters function.




slrealtime.target object, ShowParameters property

	

Set flag to display the list of parameters.

	

Changed workflow

	

Use Application object and getParameters function.

Signal Tracing Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


getsignal function

	

Get single numerical value of a signal.

	

Changed workflow

	

Use Instrument object and connectScalar function.




slrealtime.target object, NumSignals property

	

Get number of observable signals.

	

Changed workflow

	

Use Application object and getSignals function.




slrealtime.target object, OutputLog property

	

Access storage in MATLAB workspace for output or Y-vector.

	

Changed workflow

	

Use Simulink model Signal logging parameter:

set_param(bdroot,...
'SignalLogging','on')



slrealtime.target object, ShowSignals property

	

Set flag to display the list of signals.

	

Changed workflow

	

Use Application object and getSignals function.




slrealtime.target object, Signals property

	

Get list of observable signals.

	

Changed workflow

	

Use Application object and getSignals function.

Signal Logging Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


importLogData function

	

Import buffered logging data to the active session of the Simulation Data Inspector.

	

Replaced

	

Use list function and import function. For more information, see the Target.FileLog object.

Instrumentation Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


addscope function

	

Create a scope of specified type.

	

Replaced

	

Use the Simulation Data Inspector.

Use File Log blocks instead File Scope blocks.

Use Instrument objects instead of Host Scope blocks.




getscope function

	

Return scope identified by scope number.

	

Replaced

	

Use the Simulation Data Inspector.

Use File Log blocks instead File Scope blocks.

Use Instrumentobjects instead of Host Scope blocks.

Ethernet and EtherCAT Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


Target Computer Settings provided information about Ethernet setup on target computer.

	

Configure Ethernet ports on target computer

	

Moved to Speedgoat API

	

See the speedgoat.configureEthernet function at www.speedgoat.com.




slrealtime.etherCAT.filterNotifications function

	

Display EtherCAT notifications in human-readable format

	

Changed name

	

Use slrealtime.EtherCAT.filterNotifications function

Target Computer Settings Operations
R2020a and Previous Command	Command Description	R2020b and Later Command Status	New Workflow


slrealtime.getTargetSettings function

	

Get target computer settings.

	

Changed name

	

Use getTargetSettings function.

See Also

Check model for upgradable Simulink Real-Time features

Related Topics
Troubleshoot Model Upgrade for R2020b
Troubleshoot System Upgrade for R2020b

--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
Related Examples
More About
External Websites
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Gaps in Streamed Data

A real-time application is producing a live streaming overload while attempting to stream signal data at a high rate.

What This Issue Means

Live streaming from a real-time application does not guarantee all the data appears in the Simulation Data Inspector. Live stream instrumentation runs at a lower priority than the real-time application. So, data sent by live streaming could be dropped if the development computer to Speedgoat® target computer connection cannot keep up.

If a live stream overload occurs, you could see noticeable gaps in the data in the Simulation Data Inspector or see that some time steps are lost when you export data from the Simulation Data Inspector.

Try This Workaround

The issue is caused by high data rates and live streaming of data.

To workaround the issue:

Modify the real-time application to decrease the data rate for live streaming data. To do this, you could increase the sample rate, instrument fewer signals, or increase the decimation of instrumented signals.

Change the real-time application to use file logging instead of live streaming. File logging is capable of logging higher data rates without dropping data.

Related Examples
Real-Time Signal Logging and Parameter Tuning
More About
Log or Stream Real-Time Signals by Using the Simulation Data Inspector
External Websites
MathWorks Help Center website

--------------------------------------------------------------------------------------------------

What This Issue Means
Try This Workaround
Related Topics
External Websites
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot ETAS Inca Operation

Investigate issues that can occur when ETAS® Inca controls a real-time application.

A third-party calibration tool (ETAS Inca) is not working with the real-time application.

What This Issue Means

You can use the ETAS Inca tool to view signals and tune parameters in the real-time application. For more information, see the steps in Prepare ASAP2 Data Description File. In addition to the limitations listed in ETAS Inca Limitations, there are various issues that can prevent the operation of this tool.

Try This Workaround

For ETAS Inca tool issues, try these workarounds.

Simulation Data Inspector in Use

Simulation Data Inspector and the third-party calibration tools (Vector CANape® and ETAS Inca) are mutually exclusive. If you use the Simulation Data Inspector to view signal data, you cannot use the calibration tools. If you use the calibration tools, you cannot use the Simulation Data Inspector to view signal data.

Client Cannot Connect

Check the IP address of the Speedgoat® target computer associated with the model and compare it to the address stored in the ASAP2 file.

ASAP2 File Out of Date

When you rebuild a Simulink® Real-Time™ application, update the ASAP2 file loaded in the calibration tool with the new version of the file. The ASAP2 file is valid only until the next time that you build the application.

Cannot Disable Freeze Mode

Remove the dataset file from the target file system and reset the parameters to the original values specified in your model. The dataset file is named flashdata_model_name.dat.

Transport Layer Failure

When a transport layer failure occurs, ETAS Inca can display this message:

ERROR: Transport Layer Failure, Inconsistent MsgCounter

This error appears in ETAS Inca when the incorrect setting is used for 'Counter Consistency Mode'. Make sure that the 'Counter Consistency Mode' is set to 'one counter for all CTOs+DTOs' in the hardware settings for your experiment.

Related Topics
Prepare ASAP2 Data Description File
ETAS Inca Limitations
External Websites
MathWorks Help Center website
www.etas.com

--------------------------------------------------------------------------------------------------


What This Issue Means
Try These Workarounds
Related Topics
External Websites
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Communication Failure Through Firewall (Windows)

When attempting to connect to the Speedgoat® target computer by using Simulink Real-Time Explorer, this error message appears.

Error: Cannot connect to target 'TargetPC1': Cannot connect to target.

Even though the connection fails, clicking on the Update button or Reboot button in Simulink Real-Time Explorer works. These operations indicate that the target computer can be reached through the Ethernet port.

What This Issue Means

In R2020b and later releases, Simulink® Real-Time™ uses a protocol for the development-to-target computer connection that is blocked by default in Window Defender Firewall for networks classified as Public. Windows also classifies all Ethernet connections as Public by default.

If you do not select the correct options when first running MATLAB®, it is can be possible to ping, update, and reboot the target computer from MATLAB. But, these incorrect option selections prevent communication connection to the target computer. This communication connection is necessary to load and run real-time applications on the target computer.

Try These Workarounds

Resolve this issue by allowing MATLAB to communicate on all types of networks. Apply this setting when prompted on first connection or apply this setting later through the Windows Defender Firewall Allow an app through Windows Firewall selection. If that is not possible due to privilege restrictions, the issue can also be resolved by changing the classification of the Ethernet interface used for development-to-target computer connection from Public to Private.

Note

If you develop a compiled application as described in Create Standalone Instrument Panel App by Using Application Compiler, apply these workarounds to let the compiled application communicate with the target computer through the firewall.

Allow MATLAB for Public and Private Networks by Using Prompt

When you first try to connect to a target computer, Windows Defender Firewall prompts you to allow MATLAB to communicate on Private and Public networks. Make sure that both Private and Public options are selected. Only one is selected by default.

Click Allow access.

Manually Allow MATLAB for Public and Private Networks

From the Windows® Start menu, search Allow an app through Windows Firewall.

Click the Allow an app through Windows Firewall option.

Scroll down in the Allowed apps and features list and find the MATLAB release that you are using. This rule should apply to the application path:

C:\Program Files\MATLAB\RXXXXx\bin\win64\matlab.exe

where RXXXXx is the release number. You can show this path by double-clicking on the rule. If missing, this rule can be added manually.

If both Private and Public check boxes are selected, see Configure Development-to-Target Computer Ethernet Interface as Private.

Click the Change settings button and confirm the security dialog. Make sure that the Private and Public boxes are selected. A Domain option or others may be available, but these options are not relevant for the MATLAB network access configuration.

Configure Development-to-Target Computer Ethernet Interface as Private

You can use the Windows UI or PowerShell command window to configure development-to-target computer Ethernet interface as private.

Windows UI Method

The Windows UI method is straightforward, but may not be available depending on your system configuration. If not, use the PowerShell Command Window Method.

Right-click on the Wi-Fi® or Ethernet network icon in the lower right corner of the Windows taskbar (next to the clock).

Select Open Network & Internet settings.

Under the Ethernet section, click Properties.

Select the radio button for Private.

PowerShell Command Window Method

Right-click on the Windows Start menu and click the Windows PowerShell (Admin) selection.

Run the command Get-NetConnectionProfile.

Find the name of the Ethernet interface that you are using for development-to-target computer communication.

Enter the command Set-NetConnectionProfile.

Use the interface name that you find as the Name argument.

Confirm the changes by running Get-NetConnectionProfile.

For example, if the interface is named Unidentified network, enter the command:

Set-NetConnectionProfile -Name "Unidentified network" -NetworkCategory "Private"

Confirm Successful Configuration

To confirm successful configuration, in Simulink Real-Time Explorer or in the Simulink Editor on the Real-Time tab, click the Disconnected button. Confirm that the button label changes to Connected.

If the label does not change to Connected, the connection problem persists. Contact a systems administrator for further assistance. Administrator credentials may be required to configure the Windows Defender Firewall, or there may be another firewall on the development computer that requires configuration. A systems administrator may need to allow communications on specific ports or add more specific firewall rules.

Related Topics
Enable Development Computer Communication (Windows)
External Websites
MathWorks Help Center website

-----------------------------------------------------------------------------------------------
What This Issue Means
Try This Workaround
See Also
Related Topics
Documentation Examples Functions Blocks Apps Videos Answers
Troubleshoot Cannot Load Shared Object on Target Computer

When loading and running on the target computer a real-time application that depends on a shared object (.so), the real-time application cannot run and load the library. In the system log, A message like this error appears:

ldd:FATAL: Could not load library xyz.so
What This Issue Means

An error loading a shared object can indicate some issue with missing or corrupt library dependencies on the target computer. The issue could be:

The download to the Speedgoat® target computer has modified or has removed some required files on the target computer.

The download to the target computer put the library in a location that is not accessible when the real-time application runs.

Try This Workaround

These workarounds explore the possible issues.

Check for Issues with Required Files

To check for this issue, connect to the target computer, and then try to build, load, and run example model slrt_ex_osc. If working with the default target computer, in the MATLAB® Command Window, type:

tg = slrealtime;
connect(tg);
openExample('slrealtime/SlrtAddIOBlocksToSimulinkModelExample');
open_system('slrt_ex_osc');
slbuild('slrt_ex_osc');
load('slrt_ex_osc');
start('slrt_ex_osc');


If you can successfully connect to the target computer and build, load, and run the real-time application, there is no issue with files from the Simulink Real-Time Target Support Package on the target computer.

If you cannot complete those operations successfully, update the target computer software by using the force option. If working with the default target computer, in the MATLAB Command Window, type:

update(tg,'force',true);

After the software update, connect to the target computer and try to build, load, and run the real-time application..

Check Location of Shared Object on Target Computer

To check for this issue, use SSH or FTP to examine the location of the shared object file on the target computer. For more information, see Execute Target Computer RTOS Commands at Target Computer Command Line.

After you build the real-time application that links to a shared object, you must install the real-time application and the shared object on the target computer. Put the shared objects in a location on the target computer where they can be found and loaded at run time. The recommended locations are /lib, /usr/lib, or /usr/local/lib. Root access is required to copy or modify files in these locations.

See Also

update | slrealtime.getSupportInfo

Related Topics
Troubleshoot Model Links to Static Libraries or Shared Objects
Execute Target Computer RTOS Commands at Target Computer Command Line
External Code Integration of Libraries and C/C++ Code with Simulink Real-Time Models

What This Issue Means
Try This Workaround
Related Topics
External Websites
Troubleshoot Build Error for Accelerator Mode

A build error occurs when building a model in accelerator mode or rapid accelerator mode when the model contains Simulink Real-Time blocks (for example, model blocks that represent hardware).

What This Issue Means

Simulink Real-Time does not support accelerator mode or rapid accelerator mode simulation of models with blocks that represent hardware. For example, open the slrt_ex_serialasciitest model.

openExample('slrt_ex_serialasciitest').

Change the Simulink mode to rapid accelerator, and run the model, Simulink displays this error:

Unable to build a standalone executable to simulate the model 
'slrt_ex_serialasciitest' in rapid accelerator mode.

This error occurs because accelerator mode and rapid accelerator mode produce compiled code that runs on the development computer, not on the Speedgoat® target computer. Any blocks that access hardware report a build error if you compile the model by using accelerator mode or rapid accelerator mode.

Try This Workaround

Change the simulation mode to normal mode or external mode.

Related Topics
How Acceleration Modes Work
Simulink Real-Time Options Pane
External Websites
MathWorks Help Center website
Why did you choose this rating?
Submit

What This Issue Means
Try This Workaround
Related Topics
Troubleshoot Folder Names with Spaces or Special Characters Halt Model Builds

When a space character appears the file path, the Simulink® Real-Time™ model build reports an error:

Simulink Real-Time model build cannot use a file path with spaces for model build directory.

When a special character, such as an open parenthesis character "(", appears in the file path, the model build reports an error:

Error(s) encountered while building "xxxx"
What This Issue Means

For the Simulink Real-Time model build … message or for the Error(s) encountered while building … message, message indicates that a space character or special character appears in the file path. The QNX® Neutrino® toolchain for the code generation target is not compatible with file paths that contain spaces or special characters, the model build halts and does not output a real-time application.

Try This Workaround

Try these workaround options to resolve the model build errors.

Create a Build Folder

Create a folder name that does not have spaces or special characters in it. Build your model in that folder.

Map the Build Folder

Map the folder name or path that has spaces or special characters in it to a folder name or path without spaces or special characters. Build your model in the mapped folder.

Related Topics
Build Process Support for File and Folder Names

What This Issue Means
Try This Workaround
External Websites
Troubleshoot Long Build Times for Real-Time Application

The model build process for a Simscape™ Multibody™ models is slow and uses an unexpected amount of memory.

What This Issue Means

The default QNX® Neutrino® compiler switches for Simulink® Real-Time™ apply optimizations that lead to long build times or slow builds for some complex models, such as Simscape Multibody models.

Try This Workaround

To improve the real-time application build speed, change the compiler switch selections from the default selections by adding the -fdisable-rtl-sched2 switch for the C/C++ compiler:

Open your Simulink Real-Time model.

In the Simulink Editor, from the Real-Time tab, select Hardware Settings.

Select Code Generation > Build configuration > Specify

Click the C Compiler options and add option -fdisable-rtl-sched2.

Click the C++ Compiler options and add option -fdisable-rtl-sched2.

Click Apply and OK.

After updating the compiler options, the options appear as shown.

If you prefer to use a programmatic approach to update these compiler switches, you could use this code.

% add a compiler flag '-fdisable-rtl-sched2'

set_param(modelName, 'BuildConfiguration', 'Specify');
options = get_param(modelName, 'CustomToolchainOptions');
ccompiler_idx = find(strcmp(options, 'C Compiler'));
cppcompiler_idx = find(strcmp(options, 'C++ Compiler'));
options{ccompiler_idx+1} = ...
    [options{ccompiler_idx+1} ' -fdisable-rtl-sched2'];
options{cppcompiler_idx+1} = ...
    [options{cppcompiler_idx+1} ' -fdisable-rtl-sched2'];
set_param(modelName, 'CustomToolchainOptions', options);

External Websites
QNX Momentics IDE 7.1 User’s Guide
QNX Momentics IDE 7.1 User’s Guide, Utilities Reference


What This Issue Means
Try This Workaround
Related Topics
Troubleshoot Missing Real-Time Tab

Where is the Real-Time tab? This tab is not visible in the Simulink® editor.

What This Issue Means

From the model configuration, the Simulink editor determines which tabs to display. The editor displays the Real-Time tab for models that are configured for Simulink Real-Time™.

Try This Workaround

To configure your model for Simulink Real-Time, in Simulink Editor, from the Apps tab, click Simulink Real-Time.

This operation changes the code generation target for the model to a Simulink Real-Time system target file (STF) and applies other configuration parameter changes for compatibility. After changing the configuration, the Simulink editor displays the Real-Time tab for the model.

Related Topics
Create and Run Real-Time Application from Simulink Model

What This Issue Means
Try This Workaround
See Also
Related Topics
External Websites
Troubleshoot Model Links to Static Libraries or Shared Objects

Some model build and runtime issues occur when linking a real-time application to static libraries (.a) or shared objects (.so).

What This Issue Means

When building or running real-time an application that links to static link libraries (.a) or shared object libraries (.so), there are some considerations that help you use libraries that are compatible with the QNX® Neutrino® RTOS on the Speedgoat® target computer. These recommendations are helpful when troubleshooting library usage, including:

A link to a library from QNX Neutrino RTOS that is available in the Simulink Real-Time target support package

A shared object that is included in the model through an FMU block

A custom static library or shared object that is linked to the real-time application

Try This Workaround

These workarounds explore the possible issues.

Link to Accessible Libraries or Objects

When you link to a static library or shared object, the library or object must be:

Compatible with the QNX Neutrino RTOS

Accessible to the toolchain at build time

Check to ensure that you have followed the guidelines for library compatibility. See External Code Integration of Libraries and C/C++ Code with Simulink Real-Time Models. Check that the toolchain can access the library at build time. Remember that the QNX Neutrino cannot process spaces in the path to files.

Install Shared Objects on Target Computer

After you build the real-time application that links to a shared object, install both the real-time application and the shared object on the target computer. Copy the shared objects to a location on the target computer where they can be found and loaded at runtime. The recommended locations are /lib, /usr/lib, or /usr/local/lib. Root access is required to copy files to these locations.

Rebuild Real-Time Application When Rebuilding Static Libraries

Because linked static libraries are included in the real-time application, when you modify and rebuild a static library, you rebuild any real-time applications that include that library. After rebuilding the static library and the real-time application, reinstall the real-time application on the target computer.

See Also

FMU

Related Topics
Build Support for S-Functions
Compile Source Code for Functional Mock-up Units
External Code Integration of Libraries and C/C++ Code with Simulink Real-Time Models
Troubleshoot Cannot Load Shared Object on Target Computer
External Websites
MathWorks Help Center website

What This Issue Means
Try This Workaround
See Also
Troubleshoot Model Upgrade for R2020b

When building a pre-R2020b Simulink Real-Time models in R2020b, build errors occur. Some of the blocks in the model have the label Obsolete Simulink Real-Time Block.

What This Issue Means

For R2020b, you must upgrade the Simulink Real-Time model. A model Upgrade Advisor check is available to support this upgrade.

Try This Workaround

To upgrade your model for Simulink Real-Time R2020b features, use this software upgrade process:

Install Simulink Real-Time and other required products.

Install the Simulink Real-Time Target Support Package by using the MATLAB Add-Ons menu.

​Install the Speedgoat I/O Blockset. Go to the Speedgoat website.

Upgrade the target machine software. See Troubleshoot System Upgrade for R2020b.

Open a R2020b or earlier Simulink Real-Time model.

Run the Upgrade Advisor. On the Modeling tab, select Model Advisor > Upgrade Advisor.

In the Upgrade Advisor dialog box, select Check model for upgradable Simulink Real-Time features. Click the Run This Check button. The advisor lists the upgrades that it can apply and the upgrades that require manual changes.

After the check, click the Upgrade button. The advisor upgrades the model by applying all nonmanual changes.

Apply Manual Changes

When the Upgrade Advisor encounters model issues that it cannot resolve by using automated changes, the Upgrade Advisor reports these as Warning: Some of the features require manual changes. It is a good practice to copy the text of these warnings and save it for reference as you apply changes to your model.

Apply Speedgoat Utilities

In R2020b, Speedgoat® software provides support for configuring interrupts and Ethernet communications.

To configure model interrupts, use a single block from the Speedgoat I/O Blockset. You can use this block for asynchronous subsystems or for triggering the base rate of the model. The list of available interrupt sources reflects the Speedgoat I/O Blockset blocks configured in the model. For more information see the block documentation in speedgoatlib_utilities.

To configure additional Ethernet ports on the target machine, the Speedgoat I/O Blockset provides a tool to configure these Ethernet ports. The configuration is specific to the target machine and reflects the labeling on the front plates of the target machine. For more information, in the MATLAB Command Window, type:

speedgoat.configureEthernet
See Also

Troubleshoot System Upgrade for R2020b



What This Issue Means
Try This Workaround
Related Topics
External Websites
Troubleshoot S-Function Build Upgrade for R2020b

A pre-R2020b model uses S-Functions. When migrating this model to the current release, this S-Function related message appears in the build log:

undefined reference to 'C function in S-Function'
What This Issue Means

In R2020b, the compiler for model builds changed from a Windows® compatible C compiler to the QNX® Neutrino® C++ compiler. To accommodate this change, update S-Function code for C++ compatibility.

Tip

Fortran S-Functions are not supported in R2020b and later releases of Simulink® Real-Time™.

Try This Workaround

To update S-Function code for C++ compatibility, modify the declaration of the S-Function in the header file.

For example, update this C S-Function declaration:

void getAllDataMyFunction(short);
void myfunction_initialize(short, unsigned char*, short*);
void myfunction_terminate(short, int);

Updated the code to this C++ S-Function declaration:

#ifdef __cplusplus
extern "C" {
#endif

void getAllDataMyFunction(short);
void myfunction_initialize(short, unsigned char*, short*);
void myfunction_terminate(short, int);

#ifdef __cplusplus
}
#endif

Before building the updated code, remember to remove all artifacts from previous model builds.

Related Topics
External Code Integration
External Websites
How to mix C and C++

What This Issue Means
Try This Workaround
See Also
Related Topics
Troubleshoot Working with Persistent Variables

When running the getPersistentVariables function or setPersistentVariables function, this error appears:

Cannot parse the file that stores persistent variables from 
target computer. To clear the issue, delete all persistent 
variables on target computer. For more information, see 
Troubleshoot Working with Persistent Variables.
What This Issue Means

This error message indicates that the file on the Speedgoat® target computer that stores the persistent variable values is corrupted or unreadable.

Try This Workaround

To resolve this issue, clear the persistent variable values that are stored on the target computer.

On the development computer, create a Target object tg and connect to the target computer.

tg = slrealtime;
connect(tg);

Use the setPersistentVariables function to clear the persistent variable values that are stored on the target computer.

setPersistentVariables(tg,[]);
See Also

getPersistentVariables | setPersistentVariables | Persistent Variable Read | Persistent Variable Write

Related Topics
Apply Persistent Variables in Real-Time Applications

Related Topics
External Websites
Install Simulink Real-Time Software Updates

The general procedure for updating Simulink® Real-Time™ is:

Navigate to the MathWorks® download page:

www.mathworks.com/downloads

Navigate to the page for the Simulink Real-Time software version that you want. Download the software version to your development computer.

Install and integrate the new release software.

After updating Simulink Real-Time, to re-create your Simulink Real-Time target settings:

In the MATLAB® Command Window, type slrtExplorer.

On the Targets Tree pane, select a target computer node.

Click the Target Configuration tab.

Click Change IP Address and select the IP Address and Netmask for communication method between your development and target computer. For more information, see Target Computer Settings. Click OK.

Click the Disconnected link, toggling it to Connected.

Repeat steps 2 through 5 for each target computer.

Build each model that you want to execute. In the Simulink Editor, on the Real-Time tab, click Run on Target.

Related Topics
Target Computer Settings
External Websites
www.mathworks.com/downloads
www.speedgoat.com/knowledge-center

Skip to content

MATLAB Help Center

Toggle navigation
CONTENTS
Documentation Home
Real-Time Simulation and Testing
Simulink Real-Time
Troubleshooting in Simulink Real-Time
Find Simulink Real-Time Support
Find Simulink Real-Time Support

For support with Speedgoat® target machines or the Speedgoat I/O Blockset, contact Speedgoat support:

www.speedgoat.com/knowledge-center

For support on general MATLAB® or Simulink® issues, see MathWorks® Help:

www.mathworks.com/help

For support on Simulink Real-Time™ issues, see:

Simulink Real-Time Support:

MathWorks Help Center website

Simulink Real-Time Answers:

www.mathworks.com/matlabcentral/answers/?term=Simulink+Real-Time

www.mathworks.com/matlabcentral/answers/?term=xPC+Target

Simulink Real-Time Central File Exchange:

www.mathworks.com/matlabcentral/fileexchange/?term=Simulink+Real-Time

www.mathworks.com/matlabcentral/fileexchange/?term=xPC+Target

After searching these resources, if you still cannot solve your issue:

For online or phone support, contact MathWorks technical support directly.

Read .mat files in Python
https://stackoverflow.com/questions/874461/read-mat-files-in-python | Tag: matlab

An import is required, import scipy.io...

import scipy.io
mat = scipy.io.loadmat('file.mat')
How can I index a MATLAB array returned by a function without first assigning it to a local variable?
https://stackoverflow.com/questions/3627107/how-can-i-index-a-matlab-array-returned-by-a-function-without-first-assigning-it | Tag: matlab


It actually is possible to do what you want, but you have to use the functional form of the indexing operator. When you perform an indexing operation using (), you are actually making a call to the subsref function. So, even though you can't do this:

value = magic(5)(3, 3);
You can do this:

value = subsref(magic(5), struct('type', '()', 'subs', {{3, 3}}));
Ugly, but possible. ;)

In general, you just have to change the indexing step to a function call so you don't have two sets of parentheses immediately following one another. Another way to do this would be to define your own anonymous function to do the subscripted indexing. For example:

subindex = @(A, r, c) A(r, c);     % An anonymous function for 2-D indexing
value = subindex(magic(5), 3, 3);  % Use the function to index the matrix
However, when all is said and done the temporary local variable solution is much more readable, and definitely what I would suggest.

Differences between Octave and MATLAB
https://stackoverflow.com/questions/12084246/differences-between-octave-and-matlab | Tag: matlab


Rather than provide you with a complete list of differences, I'll give you my view on the matter.

If you read carefully the wiki page you provide, you'll often see sentences like "Octave supports both, while MATLAB requires the first" etc. This shows that Octave's developers try to make Octave syntax "superior" to MATLAB's.

This attitude makes Octave lose its purpose completely. The idea behind Octave is (or has become, I should say, see comments below) to have an open source alternative to run m-code. If it tries to be "better", it thus tries to be different, which is not in line with the reasons most people use it for. In my experience, running stuff developed in MATLAB doesn't ever work in one go, except for the really simple, really short stuff -- For any sizable function, I always have to translate a lot of stuff before it works in Octave, if not re-write it from scratch. How this is better, I really don't see...

Also, if you learn Octave, there's a lot of syntax allowed in Octave that's not allowed in MATLAB. Meaning -- code written in Octave often does not work in MATLAB without numerous conversions. It's also not compatible the other way around!

I could go on: The MathWorks has many toolboxes for MATLAB, there's Simulink and its related products for which there really is no equivalent in Octave (yes, you'd have to pay for all that. But often your employer/school does that anyway, and well, it at least exists), proven compliance with several industry standards, testing tools, validation tools, requirement management systems, report generation, a much larger community & user base, etc., etc., etc. MATLAB is only a small part of something much larger. Octave is...just Octave.

So, my advice:

Find out if your school will pay for MATLAB. Often they will.
If they don't, and if you can scrape together the money, buy MATLAB and learn to use it properly. In the long run it's the better decision.
If you really can't get the money -- use Octave, but learn MATLAB's syntax and stay away from Octave-only syntax. (see note)
Why this last point? Because in the sciences, there are often large code bases entirely written in MATLAB. There are professors, engineers, students, professional coders, lots and lots of people who know all the intricate gory details of MATLAB, and not so much of Octave.

If you get a new job, and everyone in your new office speaks Spanish, it's kind of cocky to demand of everyone that they start speaking English from then on, simply because you don't speak/like Spanish. Same with MATLAB and Octave.

Note: Octave can be run in "traditional mode" (by including the --traditional flag when starting Octave) which makes it give an error when certain Octave-only syntax is used.

Representing and solving a maze given an image
https://stackoverflow.com/questions/12995434/representing-and-solving-a-maze-given-an-image | Tag: matlab


Here is a solution.

Convert image to grayscale (not yet binary), adjusting weights for the colors so that final grayscale image is approximately uniform. You can do it simply by controlling sliders in Photoshop in Image -> Adjustments -> Black & White.
Convert image to binary by setting appropriate threshold in Photoshop in Image -> Adjustments -> Threshold.
Make sure threshold is selected right. Use the Magic Wand Tool with 0 tolerance, point sample, contiguous, no anti-aliasing. Check that edges at which selection breaks are not false edges introduced by wrong threshold. In fact, all interior points of this maze are accessible from the start.
Add artificial borders on the maze to make sure virtual traveler will not walk around it :)
Implement breadth-first search (BFS) in your favorite language and run it from the start. I prefer MATLAB for this task. As @Thomas already mentioned, there is no need to mess with regular representation of graphs. You can work with binarized image directly.
Here is the MATLAB code for BFS:

function path = solve_maze(img_file)
  %% Init data
  img = imread(img_file);
  img = rgb2gray(img);
  maze = img > 0;
  start = [985 398];
  finish = [26 399];

  %% Init BFS
  n = numel(maze);
  Q = zeros(n, 2);
  M = zeros([size(maze) 2]);
  front = 0;
  back = 1;

  function push(p, d)
    q = p + d;
    if maze(q(1), q(2)) && M(q(1), q(2), 1) == 0
      front = front + 1;
      Q(front, :) = q;
      M(q(1), q(2), :) = reshape(p, [1 1 2]);
    end
  end

  push(start, [0 0]);

  d = [0 1; 0 -1; 1 0; -1 0];

  %% Run BFS
  while back <= front
    p = Q(back, :);
    back = back + 1;
    for i = 1:4
      push(p, d(i, :));
    end
  end

  %% Extracting path
  path = finish;
  while true
    q = path(end, :);
    p = reshape(M(q(1), q(2), :), 1, 2);
    path(end + 1, :) = p;
    if isequal(p, start) 
      break;
    end
  end
end
It is really very simple and standard, there should not be difficulties on implementing this in Python or whatever.

And here is the answer:

Enter image description here

xkcd style graphs in MATLAB
https://stackoverflow.com/questions/12701841/xkcd-style-graphs-in-matlab | Tag: matlab


I see two ways to solve this: The first way is to add some jitter to the x/y coordinates of the plot features. This has the advantage that you can easily modify a plot, but you have to draw the axes yourself if you want to have them xkcdyfied (see @Rody Oldenhuis' solution). The second way is to create a non-jittery plot, and use imtransform to apply a random distortion to the image. This has the advantage that you can use it with any plot, but you will end up with an image, not an editable plot.

I'll show #2 first, and my attempt at #1 below (if you like #1 better, look at Rody's solution!).

enter image description here

This solution relies on two key functions: EXPORT_FIG from the file exchange to get an anti-aliased screenshot, and IMTRANSFORM to get a transformation.

%# define plot data
x = 1:0.1:10;
y1 = sin(x).*exp(-x/3) + 3;
y2 = 3*exp(-(x-7).^2/2) + 1;

%# plot
fh = figure('color','w');
hold on
plot(x,y1,'b','lineWidth',3);
plot(x,y2,'w','lineWidth',7);
plot(x,y2,'r','lineWidth',3);

xlim([0.95 10])
ylim([0 5])
set(gca,'fontName','Comic Sans MS','fontSize',18,'lineWidth',3,'box','off')

%# add an annotation 
 annotation(fh,'textarrow',[0.4 0.55],[0.8 0.65],...
     'string',sprintf('text%shere',char(10)),'headStyle','none','lineWidth',1.5,...
     'fontName','Comic Sans MS','fontSize',14,'verticalAlignment','middle','horizontalAlignment','left')

%# capture with export_fig
im = export_fig('-nocrop',fh);

%# add a bit of border to avoid black edges
im = padarray(im,[15 15 0],255);

%# make distortion grid
sfc = size(im);
[yy,xx]=ndgrid(1:7:sfc(1),1:7:sfc(2));
pts = [xx(:),yy(:)];
tf = cp2tform(pts+randn(size(pts)),pts,'lwm',12);
w = warning;
warning off images:inv_lwm:cannotEvaluateTransfAtSomeOutputLocations
imt = imtransform(im,tf);
warning(w)

%# remove padding
imt = imt(16:end-15,16:end-15,:);

figure('color','w')
imshow(imt)
Here's my initial attempt at jittering

enter image description here

%# define plot data
x = 1:0.1:10;
y1 = sin(x).*exp(-x/3) + 3;
y2 = 3*exp(-(x-7).^2/2) + 1;

%# jitter
x = x+randn(size(x))*0.01;
y1 = y1+randn(size(x))*0.01;
y2 = y2+randn(size(x))*0.01;

%# plot
figure('color','w')
hold on
plot(x,y1,'b','lineWidth',3);
plot(x,y2,'w','lineWidth',7);
plot(x,y2,'r','lineWidth',3);

xlim([0.95 10])
ylim([0 5])
set(gca,'fontName','Comic Sans MS','fontSize',18,'lineWidth',3,'box','off')
Is it possible to define more than one function per file in MATLAB, and access them from outside that file?
https://stackoverflow.com/questions/3569933/is-it-possible-to-define-more-than-one-function-per-file-in-matlab-and-access-t | Tag: matlab

The first function in an m-file (i.e. the main function), is invoked when that m-file is called. It is not required that the main function have the same name as the m-file, but for clarity it should. When the function and file name differ, the file name must be used to call the main function.

All subsequent functions in the m-file, called local functions (or "subfunctions" in the older terminology), can only be called by the main function and other local functions in that m-file. Functions in other m-files can not call them. Starting in R2016b, you can add local functions to scripts as well, although the scoping behavior is still the same (i.e. they can only be called from within the script).

In addition, you can also declare functions within other functions. These are called nested functions, and these can only be called from within the function they are nested. They can also have access to variables in functions in which they are nested, which makes them quite useful albeit slightly tricky to work with.

More food for thought...

There are some ways around the normal function scoping behavior outlined above, such as passing function handles as output arguments as mentioned in the answers from SCFrench and Jonas (which, starting in R2013b, is facilitated by the localfunctions function). However, I wouldn't suggest making it a habit of resorting to such tricks, as there are likely much better options for organizing your functions and files.

For example, let's say you have a main function A in an m-file A.m, along with local functions D, E, and F. Now let's say you have two other related functions B and C in m-files B.m and C.m, respectively, that you also want to be able to call D, E, and F. Here are some options you have:

Put D, E, and F each in their own separate m-files, allowing any other function to call them. The downside is that the scope of these functions is large and isn't restricted to just A, B, and C, but the upside is that this is quite simple.

Create a defineMyFunctions m-file (like in Jonas' example) with D, E, and F as local functions and a main function that simply returns function handles to them. This allows you to keep D, E, and F in the same file, but it doesn't do anything regarding the scope of these functions since any function that can call defineMyFunctions can invoke them. You also then have to worry about passing the function handles around as arguments to make sure you have them where you need them.

Copy D, E and F into B.m and C.m as local functions. This limits the scope of their usage to just A, B, and C, but makes updating and maintenance of your code a nightmare because you have three copies of the same code in different places.

Use private functions! If you have A, B, and C in the same directory, you can create a subdirectory called private and place D, E, and F in there, each as a separate m-file. This limits their scope so they can only be called by functions in the directory immediately above (i.e. A, B, and C) and keeps them together in the same place (but still different m-files):

myDirectory/
    A.m
    B.m
    C.m
    private/
        D.m
        E.m
        F.m
All this goes somewhat outside the scope of your question, and is probably more detail than you need, but I thought it might be good to touch upon the more general concern of organizing all of your m-files. ;)

Why is MATLAB so fast in matrix multiplication?
https://stackoverflow.com/questions/6058139/why-is-matlab-so-fast-in-matrix-multiplication | Tag: matlab


This kind of question is recurring and should be answered more clearly than "MATLAB uses highly optimized libraries" or "MATLAB uses the MKL" for once on Stack Overflow.

History:

Matrix multiplication (together with Matrix-vector, vector-vector multiplication and many of the matrix decompositions) is (are) the most important problems in linear algebra. Engineers have been solving these problems with computers since the early days.

I'm not an expert on the history, but apparently back then, everybody just rewrote his FORTRAN version with simple loops. Some standardization then came along, with the identification of "kernels" (basic routines) that most linear algebra problems needed in order to be solved. These basic operations were then standardized in a specification called: Basic Linear Algebra Subprograms (BLAS). Engineers could then call these standard, well-tested BLAS routines in their code, making their work much easier.

BLAS:

BLAS evolved from level 1 (the first version which defined scalar-vector and vector-vector operations) to level 2 (vector-matrix operations) to level 3 (matrix-matrix operations), and provided more and more "kernels" so standardized more and more of the fundamental linear algebra operations. The original FORTRAN 77 implementations are still available on Netlib's website.

Towards better performance:

So over the years (notably between the BLAS level 1 and level 2 releases: early 80s), hardware changed, with the advent of vector operations and cache hierarchies. These evolutions made it possible to increase the performance of the BLAS subroutines substantially. Different vendors then came along with their implementation of BLAS routines which were more and more efficient.

I don't know all the historical implementations (I was not born or a kid back then), but two of the most notable ones came out in the early 2000s: the Intel MKL and GotoBLAS. Your Matlab uses the Intel MKL, which is a very good, optimized BLAS, and that explains the great performance you see.

Technical details on Matrix multiplication:

So why is Matlab (the MKL) so fast at dgemm (double-precision general matrix-matrix multiplication)? In simple terms: because it uses vectorization and good caching of data. In more complex terms: see the article provided by Jonathan Moore.

Basically, when you perform your multiplication in the C++ code you provided, you are not at all cache-friendly. Since I suspect you created an array of pointers to row arrays, your accesses in your inner loop to the k-th column of "matice2": matice2[m][k] are very slow. Indeed, when you access matice2[0][k], you must get the k-th element of the array 0 of your matrix. Then in the next iteration, you must access matice2[1][k], which is the k-th element of another array (the array 1). Then in the next iteration you access yet another array, and so on... Since the entire matrix matice2 can't fit in the highest caches (it's 8*1024*1024 bytes large), the program must fetch the desired element from main memory, losing a lot of time.

If you just transposed the matrix, so that accesses would be in contiguous memory addresses, your code would already run much faster because now the compiler can load entire rows in the cache at the same time. Just try this modified version:

timer.start();
float temp = 0;
//transpose matice2
for (int p = 0; p < rozmer; p++)
{
    for (int q = 0; q < rozmer; q++)
    {
        tempmat[p][q] = matice2[q][p];
    }
}
for(int j = 0; j < rozmer; j++)
{
    for (int k = 0; k < rozmer; k++)
    {
        temp = 0;
        for (int m = 0; m < rozmer; m++)
        {
            temp = temp + matice1[j][m] * tempmat[k][m];
        }
        matice3[j][k] = temp;
    }
}
timer.stop();
So you can see how just cache locality increased your code's performance quite substantially. Now real dgemm implementations exploit that to a very extensive level: They perform the multiplication on blocks of the matrix defined by the size of the TLB (Translation lookaside buffer, long story short: what can effectively be cached), so that they stream to the processor exactly the amount of data it can process. The other aspect is vectorization, they use the processor's vectorized instructions for optimal instruction throughput, which you can't really do from your cross-platform C++ code.

Finally, people claiming that it's because of Strassen's or Coppersmith–Winograd algorithm are wrong, both these algorithms are not implementable in practice, because of hardware considerations mentioned above.

How to get the type of a variable in MATLAB
https://stackoverflow.com/questions/578519/how-to-get-the-type-of-a-variable-in-matlab | Tag: matlab


Use the class function:

>> b = 2
b =
     2
>> a = 'Hi'
a =
Hi
>> class(b)
ans =
double
>> class(a)
ans =
char
Is there a foreach in MATLAB? If so, how does it behave if the underlying data changes?
https://stackoverflow.com/questions/408080/is-there-a-foreach-in-matlab-if-so-how-does-it-behave-if-the-underlying-data-c | Tag: matlab

MATLAB's FOR loop is static in nature; you cannot modify the loop variable between iterations, unlike the for(initialization;condition;increment) loop structure in other languages. This means that the following code always prints 1, 2, 3, 4, 5 regardless of the value of B.

A = 1:5;

for i = A
    A = B;
    disp(i);
end
If you want to be able to respond to changes in the data structure during iterations, a WHILE loop may be more appropriate --- you'll be able to test the loop condition at every iteration, and set the value of the loop variable(s) as you wish:

n = 10;
f = n;
while n > 1
    n = n-1;
    f = f*n;
end
disp(['n! = ' num2str(f)])
Btw, the for-each loop in Java (and possibly other languages) produces unspecified behavior when the data structure is modified during iteration. If you need to modify the data structure, you should use an appropriate Iterator instance which allows the addition and removal of elements in the collection you are iterating. The good news is that MATLAB supports Java objects, so you can do something like this:

A = java.util.ArrayList();
A.add(1);
A.add(2);
A.add(3);
A.add(4);
A.add(5);

itr = A.listIterator();

while itr.hasNext()

    k = itr.next();
    disp(k);

    % modify data structure while iterating
    itr.remove();
    itr.add(k);

end
A tool to convert MATLAB code to Python
https://stackoverflow.com/questions/9845292/a-tool-to-convert-matlab-code-to-python | Tag: matlab

Votes: 186

There are several tools for converting Matlab to Python code.

The only one that's seen recent activity (last commit from June 2018) is Small Matlab to Python compiler (also developed here: SMOP@chiselapp).

Other options include:

LiberMate: translate from Matlab to Python and SciPy (Requires Python 2, last update 4 years ago).
OMPC: Matlab to Python (a bit outdated).
Mat2py: Matlab to Python (Requires Python 2).
Also, for those interested in an interface between the two languages and not conversion:

pymatlab: communicate from Python by sending data to the MATLAB workspace, operating on them with scripts and pulling back the resulting data.
Python-Matlab wormholes: both directions of interaction supported.
Python-Matlab bridge: use Matlab from within Python, offers matlab_magic for iPython, to execute normal matlab code from within ipython.
PyMat: Control Matlab session from Python.
pymat2: continuation of the seemingly abandoned PyMat.
mlabwrap, mlabwrap-purepy: make Matlab look like Python library (based on PyMat).
oct2py (repository): run GNU Octave commands from within Python.
pymex: Embeds the Python Interpreter in Matlab, also on File Exchange.
matpy: Access MATLAB in various ways: create variables, access .mat files, direct interface to MATLAB engine (requires MATLAB be installed).
MatPy: Python package for numerical linear algebra and plotting with a MatLab-like interface.
Btw might be helpful to look here for other migration tips:

http://bci2000.org/downloads/BCPy2000/Migration.html
On a different note, for people who might find it useful there is:

matlab2fortran
numpy.dtype size changed, may indicate binary incompatibility. Expected 96 from C header, got 88 from PyObject
https://stackoverflow.com/questions/78634235/numpy-dtype-size-changed-may-indicate-binary-incompatibility-expected-96-from | Tag: matlab


The reason is that pandas defines its numpy dependency freely as "anything newer than certain version of numpy". The problem occured, when numpy==2.0.0 has been released on June 16th 2024, because it is no longer compatible with your pandas version.

The solution is to pin down the numpy version to any before the 2.0.0. Today it could be (this is the most recent numpy 1 release):

numpy==1.26.4
To be added in your requirements or to the pip command you use (but together with installing pandas).

Nowadays pip is very flexible and can handle the issue flawesly. You just need to ask it to install both pandas and numpy of given versions in the same pip install invocation.

What is the Python equivalent of Matlab's tic and toc functions?
https://stackoverflow.com/questions/5849800/what-is-the-python-equivalent-of-matlabs-tic-and-toc-functions | Tag: matlab

Apart from timeit which ThiefMaster mentioned, a simple way to do it is just (after importing time):

t = time.time()
# do stuff
elapsed = time.time() - t
I have a helper class I like to use:

class Timer(object):
    def __init__(self, name=None):
        self.name = name

    def __enter__(self):
        self.tstart = time.time()

    def __exit__(self, type, value, traceback):
        if self.name:
            print('[%s]' % self.name,)
        print('Elapsed: %s' % (time.time() - self.tstart))
It can be used as a context manager:

with Timer('foo_stuff'):
   # do some foo
   # do some stuff
Sometimes I find this technique more convenient than timeit - it all depends on what you want to measure.

Is MATLAB OOP slow or am I doing something wrong?
https://stackoverflow.com/questions/1693429/is-matlab-oop-slow-or-am-i-doing-something-wrong | Tag: matlab

Votes: 245

I've been working with OO MATLAB for a while, and ended up looking at similar performance issues.

The short answer is: yes, MATLAB's OOP is kind of slow. There is substantial method call overhead, higher than mainstream OO languages, and there's not much you can do about it. Part of the reason may be that idiomatic MATLAB uses "vectorized" code to reduce the number of method calls, and per-call overhead is not a high priority.

I benchmarked the performance by writing do-nothing "nop" functions as the various types of functions and methods. Here are some typical results.

>> call_nops
Computer: PCWIN   Release: 2009b
Calling each function/method 100000 times
nop() function:                 0.02261 sec   0.23 usec per call
nop1-5() functions:             0.02182 sec   0.22 usec per call
nop() subfunction:              0.02244 sec   0.22 usec per call
@()[] anonymous function:       0.08461 sec   0.85 usec per call
nop(obj) method:                0.24664 sec   2.47 usec per call
nop1-5(obj) methods:            0.23469 sec   2.35 usec per call
nop() private function:         0.02197 sec   0.22 usec per call
classdef nop(obj):              0.90547 sec   9.05 usec per call
classdef obj.nop():             1.75522 sec  17.55 usec per call
classdef private_nop(obj):      0.84738 sec   8.47 usec per call
classdef nop(obj) (m-file):     0.90560 sec   9.06 usec per call
classdef class.staticnop():     1.16361 sec  11.64 usec per call
Java nop():                     2.43035 sec  24.30 usec per call
Java static_nop():              0.87682 sec   8.77 usec per call
Java nop() from Java:           0.00014 sec   0.00 usec per call
MEX mexnop():                   0.11409 sec   1.14 usec per call
C nop():                        0.00001 sec   0.00 usec per call
Similar results on R2008a through R2009b. This is on Windows XP x64 running 32-bit MATLAB.

The "Java nop()" is a do-nothing Java method called from within an M-code loop, and includes the MATLAB-to-Java dispatch overhead with each call. "Java nop() from Java" is the same thing called in a Java for() loop and doesn't incur that boundary penalty. Take the Java and C timings with a grain of salt; a clever compiler could optimize the calls away completely.

The package scoping mechanism is new, introduced at about the same time as the classdef classes. Its behavior may be related.

A few tentative conclusions:

Methods are slower than functions.
New style (classdef) methods are slower than old style methods.
The new obj.nop() syntax is slower than the nop(obj) syntax, even for the same method on a classdef object. Same for Java objects (not shown). If you want to go fast, call nop(obj).
Method call overhead is higher (about 2x) in 64-bit MATLAB on Windows. (Not shown.)
MATLAB method dispatch is slower than some other languages.
Saying why this is so would just be speculation on my part. The MATLAB engine's OO internals aren't public. It's not an interpreted vs compiled issue per se - MATLAB has a JIT - but MATLAB's looser typing and syntax may mean more work at run time. (E.g. you can't tell from syntax alone whether "f(x)" is a function call or an index into an array; it depends on the state of the workspace at run time.) It may be because MATLAB's class definitions are tied to filesystem state in a way that many other languages' are not.

So, what to do?

An idiomatic MATLAB approach to this is to "vectorize" your code by structuring your class definitions such that an object instance wraps an array; that is, each of its fields hold parallel arrays (called "planar" organization in the MATLAB documentation). Rather than having an array of objects, each with fields holding scalar values, define objects which are themselves arrays, and have the methods take arrays as inputs, and make vectorized calls on the fields and inputs. This reduces the number of method calls made, hopefully enough that the dispatch overhead is not a bottleneck.

Mimicking a C++ or Java class in MATLAB probably won't be optimal. Java/C++ classes are typically built such that objects are the smallest building blocks, as specific as you can (that is, lots of different classes), and you compose them in arrays, collection objects, etc, and iterate over them with loops. To make fast MATLAB classes, turn that approach inside out. Have larger classes whose fields are arrays, and call vectorized methods on those arrays.

The point is to arrange your code to play to the strengths of the language - array handling, vectorized math - and avoid the weak spots.

EDIT: Since the original post, R2010b and R2011a have come out. The overall picture is the same, with MCOS calls getting a bit faster, and Java and old-style method calls getting slower.

EDIT: I used to have some notes here on "path sensitivity" with an additional table of function call timings, where function times were affected by how the Matlab path was configured, but that appears to have been an aberration of my particular network setup at the time. The chart above reflects the times typical of the preponderance of my tests over time.

Update: R2011b
EDIT (2/13/2012): R2011b is out, and the performance picture has changed enough to update this.

Arch: PCWIN   Release: 2011b 
Machine: R2011b, Windows XP, 8x Core i7-2600 @ 3.40GHz, 3 GB RAM, NVIDIA NVS 300
Doing each operation 100000 times
style                           total       µsec per call
nop() function:                 0.01578      0.16
nop(), 10x loop unroll:         0.01477      0.15
nop(), 100x loop unroll:        0.01518      0.15
nop() subfunction:              0.01559      0.16
@()[] anonymous function:       0.06400      0.64
nop(obj) method:                0.28482      2.85
nop() private function:         0.01505      0.15
classdef nop(obj):              0.43323      4.33
classdef obj.nop():             0.81087      8.11
classdef private_nop(obj):      0.32272      3.23
classdef class.staticnop():     0.88959      8.90
classdef constant:              1.51890     15.19
classdef property:              0.12992      1.30
classdef property with getter:  1.39912     13.99
+pkg.nop() function:            0.87345      8.73
+pkg.nop() from inside +pkg:    0.80501      8.05
Java obj.nop():                 1.86378     18.64
Java nop(obj):                  0.22645      2.26
Java feval('nop',obj):          0.52544      5.25
Java Klass.static_nop():        0.35357      3.54
Java obj.nop() from Java:       0.00010      0.00
MEX mexnop():                   0.08709      0.87
C nop():                        0.00001      0.00
j() (builtin):                  0.00251      0.03
I think the upshot of this is that:

MCOS/classdef methods are faster. Cost is now about on par with old style classes, as long as you use the foo(obj) syntax. So method speed is no longer a reason to stick with old style classes in most cases. (Kudos, MathWorks!)
Putting functions in namespaces makes them slow. (Not new in R2011b, just new in my test.)
Update: R2014a
I've reconstructed the benchmarking code and run it on R2014a.

Matlab R2014a on PCWIN64  
Matlab 8.3.0.532 (R2014a) / Java 1.7.0_11 on PCWIN64 Windows 7 6.1 (eilonwy-win7) 
Machine: Core i7-3615QM CPU @ 2.30GHz, 4 GB RAM (VMware Virtual Platform)
nIters = 100000 

Operation                        Time (µsec)  
nop() function:                         0.14 
nop() subfunction:                      0.14 
@()[] anonymous function:               0.69 
nop(obj) method:                        3.28 
nop() private fcn on @class:            0.14 
classdef nop(obj):                      5.30 
classdef obj.nop():                    10.78 
classdef pivate_nop(obj):               4.88 
classdef class.static_nop():           11.81 
classdef constant:                      4.18 
classdef property:                      1.18 
classdef property with getter:         19.26 
+pkg.nop() function:                    4.03 
+pkg.nop() from inside +pkg:            4.16 
feval('nop'):                           2.31 
feval(@nop):                            0.22 
eval('nop'):                           59.46 
Java obj.nop():                        26.07 
Java nop(obj):                          3.72 
Java feval('nop',obj):                  9.25 
Java Klass.staticNop():                10.54 
Java obj.nop() from Java:               0.01 
MEX mexnop():                           0.91 
builtin j():                            0.02 
struct s.foo field access:              0.14 
isempty(persistent):                    0.00 
Update: R2015b: Objects got faster!
Here's R2015b results, kindly provided by @Shaked. This is a big change: OOP is significantly faster, and now the obj.method() syntax is as fast as method(obj), and much faster than legacy OOP objects.

Matlab R2015b on PCWIN64  
Matlab 8.6.0.267246 (R2015b) / Java 1.7.0_60 on PCWIN64 Windows 8 6.2 (nanit-shaked) 
Machine: Core i7-4720HQ CPU @ 2.60GHz, 16 GB RAM (20378)
nIters = 100000 

Operation                        Time (µsec)  
nop() function:                         0.04 
nop() subfunction:                      0.08 
@()[] anonymous function:               1.83 
nop(obj) method:                        3.15 
nop() private fcn on @class:            0.04 
classdef nop(obj):                      0.28 
classdef obj.nop():                     0.31 
classdef pivate_nop(obj):               0.34 
classdef class.static_nop():            0.05 
classdef constant:                      0.25 
classdef property:                      0.25 
classdef property with getter:          0.64 
+pkg.nop() function:                    0.04 
+pkg.nop() from inside +pkg:            0.04 
feval('nop'):                           8.26 
feval(@nop):                            0.63 
eval('nop'):                           21.22 
Java obj.nop():                        14.15 
Java nop(obj):                          2.50 
Java feval('nop',obj):                 10.30 
Java Klass.staticNop():                24.48 
Java obj.nop() from Java:               0.01 
MEX mexnop():                           0.33 
builtin j():                            0.15 
struct s.foo field access:              0.25 
isempty(persistent):                    0.13 
Update: R2018a
Here's R2018a results. It's not the huge jump that we saw when the new execution engine was introduced in R2015b, but it's still an appreciable year over year improvement. Notably, anonymous function handles got way faster.

Matlab R2018a on MACI64  
Matlab 9.4.0.813654 (R2018a) / Java 1.8.0_144 on MACI64 Mac OS X 10.13.5 (eilonwy) 
Machine: Core i7-3615QM CPU @ 2.30GHz, 16 GB RAM 
nIters = 100000 

Operation                        Time (µsec)  
nop() function:                         0.03 
nop() subfunction:                      0.04 
@()[] anonymous function:               0.16 
classdef nop(obj):                      0.16 
classdef obj.nop():                     0.17 
classdef pivate_nop(obj):               0.16 
classdef class.static_nop():            0.03 
classdef constant:                      0.16 
classdef property:                      0.13 
classdef property with getter:          0.39 
+pkg.nop() function:                    0.02 
+pkg.nop() from inside +pkg:            0.02 
feval('nop'):                          15.62 
feval(@nop):                            0.43 
eval('nop'):                           32.08 
Java obj.nop():                        28.77 
Java nop(obj):                          8.02 
Java feval('nop',obj):                 21.85 
Java Klass.staticNop():                45.49 
Java obj.nop() from Java:               0.03 
MEX mexnop():                           3.54 
builtin j():                            0.10 
struct s.foo field access:              0.16 
isempty(persistent):                    0.07 
Update: R2018b and R2019a: No change
No significant changes. I'm not bothering to include the test results.

Update: R2021a: Even faster objects!
Looks like classdef objects have gotten significantly faster again. But structs have gotten slower.

Matlab R2021a on MACI64  
Matlab 9.10.0.1669831 (R2021a) Update 2 / Java 1.8.0_202 on MACI64 Mac OS X 10.14.6 (eilonwy) 
Machine: Core i7-3615QM CPU @ 2.30GHz, 4 cores, 16 GB RAM 
nIters = 100000 

Operation                        Time (μsec)  
nop() function:                         0.03 
nop() subfunction:                      0.04 
@()[] anonymous function:               0.14 
nop(obj) method:                        6.65 
nop() private fcn on @class:            0.02 
classdef nop(obj):                      0.03 
classdef obj.nop():                     0.04 
classdef pivate_nop(obj):               0.03 
classdef class.static_nop():            0.03 
classdef constant:                      0.16 
classdef property:                      0.12 
classdef property with getter:          0.17 
+pkg.nop() function:                    0.02 
+pkg.nop() from inside +pkg:            0.02 
feval('nop'):                          14.45 
feval(@nop):                            0.59 
eval('nop'):                           23.59 
Java obj.nop():                        30.01 
Java nop(obj):                          6.80 
Java feval('nop',obj):                 18.17 
Java Klass.staticNop():                16.77 
Java obj.nop() from Java:               0.02 
MEX mexnop():                           2.51 
builtin j():                            0.21 
struct s.foo field access:              0.29 
isempty(persistent):                    0.26 
Source Code for Benchmarks
I've put the source code for these benchmarks up on GitHub, released under the MIT License. https://github.com/apjanke/matlab-bench

Using i and j as variables in MATLAB
https://stackoverflow.com/questions/14790740/using-i-and-j-as-variables-in-matlab | Tag: matlab

Votes: 177

Because i and j are both functions denoting the imaginary unit:

http://www.mathworks.co.uk/help/matlab/ref/i.html
http://www.mathworks.co.uk/help/matlab/ref/j.html
So a variable called i or j will override them, potentially silently breaking code that does complex maths.

Possible solutions include using ii and jj as loop variables instead, or using 1i whenever i is required to represent the imaginary unit.

How do I set default values for functions parameters in MATLAB?
https://stackoverflow.com/questions/795823/how-do-i-set-default-values-for-functions-parameters-in-matlab | Tag: matlab

Votes: 159

There isn't a direct way to do this like you've attempted.

The usual approach is to use "varargs" and check against the number of arguments. Something like:

function f(arg1, arg2, arg3)

  if nargin < 3
    arg3 =   'some default'
  end

end
There are a few fancier things you can do with isempty, etc., and you might want to look at MATLAB central for some packages that bundle these sorts of things.

You might have a look at varargin, nargchk, etc. They're useful functions for this sort of thing. varargs allow you to leave a variable number of final arguments, but this doesn't get you around the problem of default values for some/all of them.

In MATLAB, when is it optimal to use bsxfun?
https://stackoverflow.com/questions/12951453/in-matlab-when-is-it-optimal-to-use-bsxfun | Tag: matlab

Votes: 153

There are three reasons I use bsxfun (documentation, blog link)

bsxfun is faster than repmat (see below)
bsxfun requires less typing
Using bsxfun, like using accumarray, makes me feel good about my understanding of MATLAB.
bsxfun will replicate the input arrays along their "singleton dimensions", i.e., the dimensions along which the size of the array is 1, so that they match the size of the corresponding dimension of the other array. This is what is called "singleton expansion". As an aside, the singleton dimensions are the ones that will be dropped if you call squeeze.

It is possible that for very small problems, the repmat approach is faster - but at that array size, both operations are so fast that it likely won't make any difference in terms of overall performance. There are two important reasons bsxfun is faster: (1) the calculation happens in compiled code, which means that the actual replication of the array never happens, and (2) bsxfun is one of the multithreaded MATLAB functions.

I have run a speed comparison between repmat and bsxfun with MATLAB R2012b on my decently fast laptop.

Enter image description here

For me, bsxfun is about three times faster than repmat. The difference becomes more pronounced if the arrays get larger:

Enter image description here

The jump in runtime of repmat happens around an array size of 1 MB, which could have something to do with the size of my processor cache - bsxfun doesn't get as bad of a jump, because it only needs to allocate the output array.

Below you find the code I used for timing:

n = 300;
k=1; %# k=100 for the second graph
a = ones(10,1);
rr = zeros(n,1);
bb = zeros(n,1);
ntt = 100;
tt = zeros(ntt,1);
for i=1:n;
   r = rand(1,i*k);
   for it=1:ntt;
      tic,
      x = bsxfun(@plus,a,r);
      tt(it) = toc;
   end;
   bb(i) = median(tt);
   for it=1:ntt;
      tic,
      y = repmat(a,1,i*k) + repmat(r,10,1);
      tt(it) = toc;
   end;
   rr(i) = median(tt);
end
What can MATLAB do that R cannot do?
https://stackoverflow.com/questions/1738087/what-can-matlab-do-that-r-cannot-do | Tag: matlab

Votes: 128

Can you use R to replace MATLAB?

Yes.

I used MATLAB for years but switched primarily to R in the last 3 years. At this point, they have much more in common than not. It partially depends on your field and use-case. And as Spencer Graves said previously, it also depends on which "church you happen to frequent". It's best if you look at the MATLAB toolkit vs. CRAN for a specific task before you decide.

A similar question asked on R-Help a few years ago and again more recently. David Hiebeler (at the University of Maine) maintains an extensive R/MATLAB comparison, and is the best reference on the subject. You can also review this comparison of basic functions.

Here are some of the things that I've observed in the past, none of which should be deal-breakers.

Generally, MATLAB has a better programming environment (e.g. better documentation, better debuggers, better object browser) and is "easier" to use (you can use MATLAB without doing any programming if you want). Simulink allows you to visually program by connecting blocks in graphs. REvolution R is addressing some of these differences by providing a better IDE with improved debugging, but it's still a step behind.
MATLAB is a little faster with the normal configuration (see this benchmark for an example), although there are things that can be done to improve R performance if that becomes an issue.
Since it's commercial, it also arguably has more "products" (in the sense of integrated add-ons) and support (but you pay for it). See the product list. For instance, it has things like the MATLAB compiler which creates executable MATLAB programs that can be deployed.
So far as packages/toolkits are concerned, MATLAB has much more support for the physical sciences while R is stronger for statistics, which is not to say that the other can't perform these tasks. And they can both be easily extended.
So, if ease-of-use isn't a primary concern (and there's no other business reason to avoid using an open-source tool), then I think that there's a real case to be made for using R. It has a very strong community around it (the R mailing lists are amazing), is rapidly developing (see CRAN), and it's free (which isn't a small issue!).

Edit: I would just add one further point to this: the book "Functional Data Analysis with R and MATLAB" includes a chapter on the "Essential Comparisons of the Matlab and R Languages". This covers some important syntax differences (such as the interpretation of a dot, or the meaning of square brackets []). The book itself is well worth reading for anyone interested in functional programming (in either language).

Matlab: Running an m-file from command-line
https://stackoverflow.com/questions/6657005/matlab-running-an-m-file-from-command-line | Tag: matlab

Votes: 130

A command like this runs the m-file successfully:

"C:\<a long path here>\matlab.exe" -nodisplay -nosplash -nodesktop -r "run('C:\<a long path here>\mfile.m'); exit;"

How to elegantly ignore some return values of a MATLAB function
https://stackoverflow.com/questions/747296/how-to-elegantly-ignore-some-return-values-of-a-matlab-function | Tag: matlab

Votes: 240

With MATLAB Version 7.9 (R2009b) you can use a ~, e.g.,

[~, ~, variableThatIWillUse] = myFunction();
Note that the , isn't optional. Just typing [~ ~ var] will not work, and will throw an error.

See the release notes for details.

What is the equivalent of MATLAB's repmat in NumPy
https://stackoverflow.com/questions/1721802/what-is-the-equivalent-of-matlabs-repmat-in-numpy | Tag: matlab

Votes: 122

Here is a much better (official) NumPy for Matlab Users link - I'm afraid the mathesaurus one is quite out of date.

The numpy equivalent of repmat(a, m, n) is tile(a, (m, n)).

This works with multiple dimensions and gives a similar result to matlab. (Numpy gives a 3d output array as you would expect - matlab for some reason gives 2d output - but the content is the same).

Matlab:

>> repmat([1;1],[1,1,1])

ans =
     1
     1
Python:

In [46]: a = np.array([[1],[1]])
In [47]: np.tile(a, [1,1,1])
Out[47]: 
array([[[1],
        [1]]])
How can I apply a function to every row/column of a matrix in MATLAB?
https://stackoverflow.com/questions/2307249/how-can-i-apply-a-function-to-every-row-column-of-a-matrix-in-matlab | Tag: matlab

Votes: 79

Many built-in operations like sum and prod are already able to operate across rows or columns, so you may be able to refactor the function you are applying to take advantage of this.

If that's not a viable option, one way to do it is to collect the rows or columns into cells using mat2cell or num2cell, then use cellfun to operate on the resulting cell array.

As an example, let's say you want to sum the columns of a matrix M. You can do this simply using sum:

M = magic(10);           %# A 10-by-10 matrix
columnSums = sum(M, 1);  %# A 1-by-10 vector of sums for each column
And here is how you would do this using the more complicated num2cell/cellfun option:

M = magic(10);                  %# A 10-by-10 matrix
C = num2cell(M, 1);             %# Collect the columns into cells
columnSums = cellfun(@sum, C);  %# A 1-by-10 vector of sums for each cell
Automatically plot different colored lines
https://stackoverflow.com/questions/2028818/automatically-plot-different-colored-lines | Tag: matlab

Votes: 132

You could use a colormap such as HSV to generate a set of colors. For example:

cc=hsv(12);
figure; 
hold on;
for i=1:12
    plot([0 1],[0 i],'color',cc(i,:));
end
MATLAB has 13 different named colormaps ('doc colormap' lists them all).

Another option for plotting lines in different colors is to use the LineStyleOrder property; see Defining the Color of Lines for Plotting in the MATLAB documentation for more information.

reading v 7.3 mat file in python
https://stackoverflow.com/questions/17316880/reading-v-7-3-mat-file-in-python | Tag: matlab

Votes: 103

I've created a small library to load MATLAB 7.3 files:

pip install mat73
To load a .mat 7.3 into Python as a dictionary:

import mat73
data_dict = mat73.loadmat('data.mat')
simple as that!

What's the difference between & and && in MATLAB?
https://stackoverflow.com/questions/1379415/whats-the-difference-between-and-in-matlab | Tag: matlab

Votes: 108

The single ampersand & is the logical AND operator. The double ampersand && is again a logical AND operator that employs short-circuiting behaviour. Short-circuiting just means the second operand (right hand side) is evaluated only when the result is not fully determined by the first operand (left hand side)

A & B (A and B are evaluated)

A && B (B is only evaluated if A is true)

How to search for a string in cell array in MATLAB?
https://stackoverflow.com/questions/8061344/how-to-search-for-a-string-in-cell-array-in-matlab | Tag: matlab

Votes: 131

I guess the following code could do the trick:

strs = {'HA' 'KU' 'LA' 'MA' 'TATA'}
ind=find(ismember(strs,'KU'))
This returns

ans = 
     2
arrayfun can be significantly slower than an explicit loop in matlab. Why?
https://stackoverflow.com/questions/12522888/arrayfun-can-be-significantly-slower-than-an-explicit-loop-in-matlab-why | Tag: matlab

Votes: 102

You can get the idea by running other versions of your code. Consider explicitly writing out the computations, instead of using a function in your loop

tic
Soln3 = ones(T, N);
for t = 1:T
    for n = 1:N
        Soln3(t, n) = 3*x(t, n)^2 + 2*x(t, n) - 1;
    end
end
toc
Time to compute on my computer:

Soln1  1.158446 seconds.
Soln2  10.392475 seconds.
Soln3  0.239023 seconds.
Oli    0.010672 seconds.
Now, while the fully 'vectorized' solution is clearly the fastest, you can see that defining a function to be called for every x entry is a huge overhead. Just explicitly writing out the computation got us factor 5 speedup. I guess this shows that MATLABs JIT compiler does not support inline functions. According to the answer by gnovice there, it is actually better to write a normal function rather than an anonymous one. Try it.

Next step - remove (vectorize) the inner loop:

tic
Soln4 = ones(T, N);
for t = 1:T
    Soln4(t, :) = 3*x(t, :).^2 + 2*x(t, :) - 1;
end
toc

Soln4  0.053926 seconds.
Another factor 5 speedup: there is something in those statements saying you should avoid loops in MATLAB... Or is there really? Have a look at this then

tic
Soln5 = ones(T, N);
for n = 1:N
    Soln5(:, n) = 3*x(:, n).^2 + 2*x(:, n) - 1;
end
toc

Soln5   0.013875 seconds.
Much closer to the 'fully' vectorized version. Matlab stores matrices column-wise. You should always (when possible) structure your computations to be vectorized 'column-wise'.

We can go back to Soln3 now. The loop order there is 'row-wise'. Lets change it

tic
Soln6 = ones(T, N);
for n = 1:N
    for t = 1:T
        Soln6(t, n) = 3*x(t, n)^2 + 2*x(t, n) - 1;
    end
end
toc

Soln6  0.201661 seconds.
Better, but still very bad. Single loop - good. Double loop - bad. I guess MATLAB did some decent work on improving the performance of loops, but still the loop overhead is there. If you would have some heavier work inside, you would not notice. But since this computation is memory bandwidth bounded, you do see the loop overhead. And you will even more clearly see the overhead of calling Func1 there.

So what's up with arrayfun? No function inlinig there either, so a lot of overhead. But why so much worse than a double nested loop? Actually, the topic of using cellfun/arrayfun has been extensively discussed many times (e.g. here, here, here and here). These functions are simply slow, you can not use them for such fine-grain computations. You can use them for code brevity and fancy conversions between cells and arrays. But the function needs to be heavier than what you wrote:

tic
Soln7 = arrayfun(@(a)(3*x(:,a).^2 + 2*x(:,a) - 1), 1:N, 'UniformOutput', false);
toc

Soln7  0.016786 seconds.
Note that Soln7 is a cell now.. sometimes that is useful. Code performance is quite good now, and if you need cell as output, you do not need to convert your matrix after you have used the fully vectorized solution.

So why is arrayfun slower than a simple loop structure? Unfortunately, it is impossible for us to say for sure, since there is no source code available. You can only guess that since arrayfun is a general purpose function, which handles all kinds of different data structures and arguments, it is not necessarily very fast in simple cases, which you can directly express as loop nests. Where does the overhead come from we can not know. Could the overhead be avoided by a better implementation? Maybe not. But unfortunately the only thing we can do is study the performance to identify the cases, in which it works well, and those, where it doesn't.

Update Since the execution time of this test is short, to get reliable results I added now a loop around the tests:

for i=1:1000
   % compute
end
Some times given below:

Soln5   8.192912 seconds.
Soln7  13.419675 seconds.
Oli     8.089113 seconds.
You see that the arrayfun is still bad, but at least not three orders of magnitude worse than the vectorized solution. On the other hand, a single loop with column-wise computations is as fast as the fully vectorized version... That was all done on a single CPU. Results for Soln5 and Soln7 do not change if I switch to 2 cores - In Soln5 I would have to use a parfor to get it parallelized. Forget about speedup... Soln7 does not run in parallel because arrayfun does not run in parallel. Olis vectorized version on the other hand:

Oli  5.508085 seconds.
Map function in MATLAB?
https://stackoverflow.com/questions/983163/map-function-in-matlab | Tag: matlab

Votes: 139

The short answer: the built-in function arrayfun does exactly what your map function does for numeric arrays:

>> y = arrayfun(@(x) x^2, 1:10)
y =

     1     4     9    16    25    36    49    64    81   100
There are two other built-in functions that behave similarly: cellfun (which operates on elements of cell arrays) and structfun (which operates on each field of a structure).

However, these functions are often not necessary if you take advantage of vectorization, specifically using element-wise arithmetic operators. For the example you gave, a vectorized solution would be:

>> x = 1:10;
>> y = x.^2
y =

     1     4     9    16    25    36    49    64    81   100
Some operations will automatically operate across elements (like adding a scalar value to a vector) while others operators have a special syntax for element-wise operation (denoted by a . before the operator). Many built-in functions in MATLAB are designed to operate on vector and matrix arguments using element-wise operations (often applied to a given dimension, such as sum and mean for example), and thus don't require map functions.

To summarize, here are some different ways to square each element in an array:

x = 1:10;       % Sample array
f = @(x) x.^2;  % Anonymous function that squares each element of its input

% Option #1:
y = x.^2;  % Use the element-wise power operator

% Option #2:
y = f(x);  % Pass a vector to f

% Option #3:
y = arrayfun(f, x);  % Pass each element to f separately
Of course, for such a simple operation, option #1 is the most sensible (and efficient) choice.

Why does numpy std() give a different result to matlab std()?
https://stackoverflow.com/questions/27600207/why-does-numpy-std-give-a-different-result-to-matlab-std | Tag: matlab

Votes: 175

The NumPy function np.std takes an optional parameter ddof: "Delta Degrees of Freedom". By default, this is 0. Set it to 1 to get the MATLAB result:

>>> np.std([1,3,4,6], ddof=1)
2.0816659994661326
To add a little more context, in the calculation of the variance (of which the standard deviation is the square root) we typically divide by the number of values we have.

But if we select a random sample of N elements from a larger distribution and calculate the variance, division by N can lead to an underestimate of the actual variance. To fix this, we can lower the number we divide by (the degrees of freedom) to a number less than N (usually N-1). The ddof parameter allows us change the divisor by the amount we specify.

Unless told otherwise, NumPy will calculate the biased estimator for the variance (ddof=0, dividing by N). This is what you want if you are working with the entire distribution (and not a subset of values which have been randomly picked from a larger distribution). If the ddof parameter is given, NumPy divides by N - ddof instead.

The default behaviour of MATLAB's std is to correct the bias for sample variance by dividing by N-1. This gets rid of some of (but probably not all of) of the bias in the standard deviation. This is likely to be what you want if you're using the function on a random sample of a larger distribution.

The nice answer by @hbaderts gives further mathematical details.

How to get all files under a specific directory in MATLAB?
https://stackoverflow.com/questions/2652630/how-to-get-all-files-under-a-specific-directory-in-matlab | Tag: matlab

Votes: 129

Update: Given that this post is quite old, and I've modified this utility a lot for my own use during that time, I thought I should post a new version. My newest code can be found on The MathWorks File Exchange: dirPlus.m. You can also get the source from GitHub.

I made a number of improvements. It now gives you options to prepend the full path or return just the file name (incorporated from Doresoom and Oz Radiano) and apply a regular expression pattern to the file names (incorporated from Peter D). In addition, I added the ability to apply a validation function to each file, allowing you to select them based on criteria other than just their names (i.e. file size, content, creation date, etc.).

NOTE: In newer versions of MATLAB (R2016b and later), the dir function has recursive search capabilities! So you can do this to get a list of all *.m files in all subfolders of the current folder:

dirData = dir('**/*.m');
Old code: (for posterity)
Here's a function that searches recursively through all subdirectories of a given directory, collecting a list of all file names it finds:

function fileList = getAllFiles(dirName)

  dirData = dir(dirName);      %# Get the data for the current directory
  dirIndex = [dirData.isdir];  %# Find the index for directories
  fileList = {dirData(~dirIndex).name}';  %'# Get a list of the files
  if ~isempty(fileList)
    fileList = cellfun(@(x) fullfile(dirName,x),...  %# Prepend path to files
                       fileList,'UniformOutput',false);
  end
  subDirs = {dirData(dirIndex).name};  %# Get a list of the subdirectories
  validIndex = ~ismember(subDirs,{'.','..'});  %# Find index of subdirectories
                                               %#   that are not '.' or '..'
  for iDir = find(validIndex)                  %# Loop over valid subdirectories
    nextDir = fullfile(dirName,subDirs{iDir});    %# Get the subdirectory path
    fileList = [fileList; getAllFiles(nextDir)];  %# Recursively call getAllFiles
  end

end
After saving the above function somewhere on your MATLAB path, you can call it in the following way:

fileList = getAllFiles('D:\dic');
Octave / Matlab: Extend a vector making it repeat itself?
https://stackoverflow.com/questions/2459851/octave-matlab-extend-a-vector-making-it-repeat-itself | Tag: matlab

Votes: 144

The function you're looking for is repmat().

v10 = repmat(v, 1, 5)
LNK2038: mismatch detected for 'RuntimeLibrary': value 'MT_StaticRelease' doesn't match value 'MD_DynamicRelease' in file.obj
https://stackoverflow.com/questions/28887001/lnk2038-mismatch-detected-for-runtimelibrary-value-mt-staticrelease-doesn | Tag: matlab

Votes: 100

This error can occur when you are statically linking your project with a library (typically a file with .lib extension) but the linker setting in your Visual Studio project are set to dynamically link (meaning the link will occur during runtime, usually with a .dll file).

To define that you need the project to use static linking start Visual Studio. In the Solution Explorer pane, right click the project name, and select Properties. Expand the properties as shown in the figure below: C/C++ --> Code Generation --> Runtime Library, select the Multi-threaded (/MT) option from the dropdown menu. enter image description here

Hash tables in MATLAB
https://stackoverflow.com/questions/3591942/hash-tables-in-matlab | Tag: matlab

Votes: 123

Consider using MATLAB's map class: containers.Map. Here is a brief overview:

Creation:

>> keys = {'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', ...
  'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Annual'};

>> values = {327.2, 368.2, 197.6, 178.4, 100.0,  69.9, ...
  32.3,  37.3,  19.0,  37.0,  73.2, 110.9, 1551.0};

>> rainfallMap = containers.Map(keys, values)

rainfallMap = 
  containers.Map handle
  Package: containers

  Properties:
        Count: 13
      KeyType: 'char'
    ValueType: 'double'
  Methods, Events, Superclasses
Lookup:

x = rainfallMap('Jan');
Assign:

rainfallMap('Jan') = 0;
Add:

rainfallMap('Total') = 999;
Remove:

rainfallMap.remove('Total')
Inspect:

values = rainfallMap.values;
keys = rainfallMap.keys;
sz = rainfallMap.size;
Check key:

if rainfallMap.isKey('Today')
    ...
end
Setting graph figure size
https://stackoverflow.com/questions/5183047/setting-graph-figure-size | Tag: matlab

Votes: 82

The properties that can be set for a figure is referenced here.

You could then use:

figure_number = 1;
x      = 0;   % Screen position
y      = 0;   % Screen position
width  = 600; % Width of figure
height = 400; % Height of figure (by default in pixels)

figure(figure_number, 'Position', [x y width height]);
cocktail party algorithm SVD implementation ... in one line of code?
https://stackoverflow.com/questions/20414667/cocktail-party-algorithm-svd-implementation-in-one-line-of-code | Tag: matlab

Votes: 31

I was trying to figure this out as well, 2 years later. But I got my answers; hopefully it'll help someone.

You need 2 audio recordings. You can get audio examples from http://research.ics.aalto.fi/ica/cocktail/cocktail_en.cgi.

reference for implementation is http://www.cs.nyu.edu/~roweis/kica.html

ok, here's code -

[x1, Fs1] = audioread('mix1.wav');
[x2, Fs2] = audioread('mix2.wav');
xx = [x1, x2]';
yy = sqrtm(inv(cov(xx')))*(xx-repmat(mean(xx,2),1,size(xx,2)));
[W,s,v] = svd((repmat(sum(yy.*yy,1),size(yy,1),1).*yy)*yy');

a = W*xx; %W is unmixing matrix
subplot(2,2,1); plot(x1); title('mixed audio - mic 1');
subplot(2,2,2); plot(x2); title('mixed audio - mic 2');
subplot(2,2,3); plot(a(1,:), 'g'); title('unmixed wave 1');
subplot(2,2,4); plot(a(2,:),'r'); title('unmixed wave 2');

audiowrite('unmixed1.wav', a(1,:), Fs1);
audiowrite('unmixed2.wav', a(2,:), Fs1);
enter image description here

How do I iterate through each element in an n-dimensional matrix in MATLAB?
https://stackoverflow.com/questions/758736/how-do-i-iterate-through-each-element-in-an-n-dimensional-matrix-in-matlab | Tag: matlab

Votes: 95

You can use linear indexing to access each element.

for idx = 1:numel(array)
    element = array(idx)
    ....
end
This is useful if you don't need to know what i,j,k, you are at. However, if you don't need to know what index you are at, you are probably better off using arrayfun()

Why/when should I prefer MATLAB over Octave?
https://stackoverflow.com/questions/3534867/why-when-should-i-prefer-matlab-over-octave | Tag: matlab

Votes: 54

In 2008 I tried doing the same thing. I quickly noticed the following show stoppers:

Toolboxes are not as complete and not as well tested. Particularly the image processing toolbox that my work relied heavily upon (the big show stopper was that imtransform was not implemented).
The Octave debugger and profiler were primitive compared to Matlab's.
If you work with others, it may be very difficult to get them to change.
If you use third party toolboxes, you are on your own getting them to work.
Octave's plots are not publication quality.
But I have to say that I was generally impressed at how compatible Octave is with Matlab, if your use of Matlab is basic, you may get lucky. Finally this was in 2008, in two years things can change a lot.

How to concat string + i?
https://stackoverflow.com/questions/8420147/how-to-concat-string-i | Tag: matlab

Votes: 124

You can concatenate strings using strcat. If you plan on concatenating numbers as strings, you must first use num2str to convert the numbers to strings.

Also, strings can't be stored in a vector or matrix, so f must be defined as a cell array, and must be indexed using { and } (instead of normal round brackets).

f = cell(N, 1);
for i=1:N
   f{i} = strcat('f', num2str(i));
end
In MATLAB, can I have a script and a function definition in the same file?
https://stackoverflow.com/questions/5363397/in-matlab-can-i-have-a-script-and-a-function-definition-in-the-same-file | Tag: matlab

Votes: 51

As of release R2016b, you can have local functions in scripts, like so:

data = 1:10;            % A vector of data
squaredData = f(data);  % Invoke the local function

function y = f(x)
  y = x.^2;
end
Prior to release R2016b, the only type of function that could be defined inside a MATLAB script was an anonymous function. For example:

data = 1:10;            % A vector of data
f = @(x) x.^2;          % An anonymous function
squaredData = f(data);  % Invoke the anonymous function
Note that anonymous functions are better suited to simple operations, since they have to be defined in a single expression. For more complicated functions, you will have to define them in their own files, place them somewhere on the MATLAB path to make them accessible to your script, and then call them from your script as you would any other function.

Python equivalent to 'hold on' in Matlab
https://stackoverflow.com/questions/21465988/python-equivalent-to-hold-on-in-matlab | Tag: matlab

Votes: 65

Just call plt.show() at the end:

import numpy as np
import matplotlib.pyplot as plt

plt.axis([0,50,60,80])
for i in np.arange(1,5):
    z = 68 + 4 * np.random.randn(50)
    zm = np.cumsum(z) / range(1,len(z)+1)
    plt.plot(zm)    

n = np.arange(1,51)
su = 68 + 4 / np.sqrt(n)
sl = 68 - 4 / np.sqrt(n)

plt.plot(n,su,n,sl)

plt.show()
MatLab error: cannot open with static TLS
https://stackoverflow.com/questions/19268293/matlab-error-cannot-open-with-static-tls | Tag: matlab

Votes: 108

That's bug no 961964 of MATLAB known since R2012b (8.0). MATLAB dynamically loads some libs with static TLS (thread local storage, e.g. see gcc compiler flag -ftls-model). Loading too many such libs => no space left.

Until now mathwork's only workaround is to load the important(!) libs first by using them early (they suggest to put "ones(10)*ones(10);" in startup.m). I better don't comment on this "solution strategy".

Since R2013b (8.2.0.701) with Linux x86_64 my experience is: Don't use "doc" (the graphical help system)! I think this doc-utility (libxul, etc.) is using a lot of static TLS memory.

Here is an update (2013/12/31)
All the following tests were done with Fedora 20 (with glibc-2.18-11.fc20) and Matlab 8.3.0.73043 (R2014a Prerelease).

For more information on TLS, see Ulrich Drepper, ELF handling For Thread-Local Storage, Version 0.21, 2013, currently available at Akkadia and Redhat.

What happens exactly?

MATLAB dynamically (with dlopen) loads several libraries that need tls initialization. All those libs need a slot in the dtv (dynamic thread vector). Because MATLAB loads several of these libs dynamically at runtime at compile/link time the linker (at mathworks) had no chance to count the slots needed (that's the important part). Now it's the task of the dynamic lib loader to handle such a case at runtime. But this is not easy. To cite dl-open.c:

For static TLS we have to allocate the memory here and now. This includes allocating memory in the DTV. But we cannot change any DTV other than our own. So, if we cannot guarantee that there is room in the DTV we don't even try it and fail the load.

There is a compile time constant (called DTV_SURPLUS, see glibc-source/sysdeps/generic/ldsodefs.h) in the glibc's dynamic lib loader for reserving a number of additional slots for such a mess (dynamically loading libs with static TLS in a multithreading program). In the glibc-Version of Fedora 20 this value is 14.

Here are the first libs (running MATLAB) that needed dtv slots in my case:

matlabroot/bin/glnxa64/libut.so
/lib64/libstdc++.so.6
/lib64/libpthread.so.0
matlabroot/bin/glnxa64/libunwind.so.8
/lib64/libuuid.so.1
matlabroot/sys/java/jre/glnxa64/jre/lib/amd64/server/libjvm.so
matlabroot/sys/java/jre/glnxa64/jre/lib/amd64/libfontmanager.so
matlabroot/sys/java/jre/glnxa64/jre/lib/amd64/libt2k.so
matlabroot/bin/glnxa64/mkl.so
matlabroot/sys/os/glnxa64/libiomp5.so
/lib64/libasound.so.2
matlabroot/sys/jxbrowser/glnxa64/xulrunner/xulrunner-linux-64/libxul.so
/lib64/libselinux.so.1
/lib64/libpixman-1.so.0
/lib64/libEGL.so.1
/lib64/libGL.so.1
/lib64/libglapi.so.0
Yes more than 14 => too many => no slot left in the dtv. That's what the error message tries to tell us and especially mathworks.

For the record: In order not to violate MATLAB's license I didn't debug, decompile or disassemble any part of the binaries shipped with MATLAB. I only debugged the free and open glibc-binaries of Fedora 20 that MATLAB were using to dynamically load the libs.

What can be done, to solve this problem?

There are 3 options:

(a) Rebuild MATLAB and do not dynamically load those libs (with initial-exec tls model) instead link against them (then the linker can count the required slots!)

(b) Rebuild those libs and ensure they are NOT using the initial-exec tls model.

(c) Rebuild glibc and increase DTV_SURPLUS in glibc/sysdeps/generic/ldsodefs.h

Obviously options (a) and (b) can only be done by mathworks.

For option (c) no source of MATLAB is needed and thus can be done without mathworks.

What is the status at mathworks?

I really tried to explain this to the "MathWorks Technical Support Department". But my impression is: they don't understand me. They closed my support ticket and suggested a telephone(!) conversation in January 2014 with a technical support manager.

I'll do my very best to explain this, but to be honest: I'm not very confident.

Update (2014/01/10): Currently mathworks is trying option (b).

Update (2014/03/19): For the file libiomp5.so you can download a newly compiled version (without static TLS) at mathworks, bug report 961964. And the other libs? No improvement there. So don't be suprised to get "dlopen: cannot load any more object with static TLS" with "doc", e.g. see bug report 1003952.

How to set the DPI of Java Swing apps on Windows/Linux?
https://stackoverflow.com/questions/15659044/how-to-set-the-dpi-of-java-swing-apps-on-windows-linux | Tag: matlab

Votes: 41

I'm currently investigating this issue on Windows. Here's what I found:

Most Swing Look & Feels don't support high DPI at all, not even Nimbus even though it's supposed to be scalable. I found some old blog posts saying that Nimbus might eventually offer high DPI scaling, but apparently that never happened.

The one exception is System LAF but its default font is ~10% smaller than the actual system font size, at all DPI settings. Moreover, System must be selected explicitly as described here: http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html

There's no single scaling factor that you could set in Swing, either. The specific LAF has to provide code to handle scaling. So the best you can do is select System and hope it's good enough.

However, JavaFX does correctly and automatically scale all the way up to 150% on my system. If at all possible, I suggest you use JavaFX to build your GUI.

edit: I made a couple small test programs and took comparison screenshots for various GUI frameworks, Swing themes, and DPI settings. This might be informative for people reading this question: http://kynosarges.org/GuiDpiScaling.html

Call Python function from MATLAB
https://stackoverflow.com/questions/1707780/call-python-function-from-matlab | Tag: matlab

Votes: 48

I had a similar requirement on my system and this was my solution:

In MATLAB there is a function called perl.m, which allows you to call perl scripts from MATLAB. Depending on which version you are using it will be located somewhere like

C:\Program Files\MATLAB\R2008a\toolbox\matlab\general\perl.m
Create a copy called python.m, a quick search and replace of perl with python, double check the command path it sets up to point to your installation of python. You should now be able to run python scripts from MATLAB.

Example

A simple squared function in python saved as "sqd.py", naturally if I was doing this properly I'd have a few checks in testing input arguments, valid numbers etc.

import sys

def squared(x):
    y = x * x
    return y

if __name__ == '__main__':
    x = float(sys.argv[1])
    sys.stdout.write(str(squared(x)))
Then in MATLAB

>> r=python('sqd.py','3.5')
r =
12.25
>> r=python('sqd.py','5')
r =
25.0
>>
Iterating through struct fieldnames in MATLAB
https://stackoverflow.com/questions/2803962/iterating-through-struct-fieldnames-in-matlab | Tag: matlab

Votes: 99

You have to use curly braces ({}) to access fields, since the fieldnames function returns a cell array of strings:

for i = 1:numel(fields)
  teststruct.(fields{i})
end
Using parentheses to access data in your cell array will just return another cell array, which is displayed differently from a character array:

>> fields(1)  % Get the first cell of the cell array

ans = 

    'a'       % This is how the 1-element cell array is displayed

>> fields{1}  % Get the contents of the first cell of the cell array

ans =

a             % This is how the single character is displayed
Changing Fonts Size in Matlab Plots
https://stackoverflow.com/questions/8934468/changing-fonts-size-in-matlab-plots | Tag: matlab

Votes: 60

Jonas's answer is good, but I had to modify it slightly to get every piece of text on the screen to change:

set(gca,'FontSize',30,'fontWeight','bold')

set(findall(gcf,'type','text'),'FontSize',30,'fontWeight','bold')
Octave/Matlab: Adding new elements to a vector
https://stackoverflow.com/questions/16188058/octave-matlab-adding-new-elements-to-a-vector | Tag: matlab

Votes: 94

x(end+1) = newElem is a bit more robust.

x = [x newElem] will only work if x is a row-vector, if it is a column vector x = [x; newElem] should be used. x(end+1) = newElem, however, works for both row- and column-vectors.

In general though, growing vectors should be avoided. If you do this a lot, it might bring your code down to a crawl. Think about it: growing an array involves allocating new space, copying everything over, adding the new element, and cleaning up the old mess...Quite a waste of time if you knew the correct size beforehand :)

How to change the window title of a MATLAB plotting figure?
https://stackoverflow.com/questions/4684363/how-to-change-the-window-title-of-a-matlab-plotting-figure | Tag: matlab

Votes: 84

First you must create an empty figure with the following command.

figure('name','Title of the window here');
By doing this, the newly created figure becomes you active figure. Immediately after calling a plot() command, it will print your plotting onto this figure. So your window will have a title.

This is the code you must use:

figure('name','Title of the window here');

hold on

x = [0; 0.2; 0.4; 0.6; 0.8; 1; 1.2; 1.4; 1.6; 1.8; 2; 2.2; 2.4; 2.6; 2.8; 3; 3.2; 3.4; 3.6; 3.8; 4; 4.2; 4.4; 4.6; 4.8; 5; 5.2; 5.4; 5.6; 5.8; 6; 6.2; 6.4; 6.6; 6.8; 7; 7.2; 7.4; 7.6; 7.8; 8; 8.2; 8.4; 8.6; 8.8; 9; 9.2; 9.4; 9.6; 9.8; 10; 10.2; 10.4; 10.6; 10.8; 11; 11.2; 11.4; 11.6; 11.8; 12; 12.2; 12.4; 12.6; 12.8; 13; 13.2; 13.4; 13.6; 13.8; 14; 14.2; 14.4; 14.6; 14.8; 15; 15.2; 15.4; 15.6; 15.8; 16; 16.2; 16.4; 16.6; 16.8; 17; 17.2; 17.4; 17.6; 17.8; 18; 18.2; 18.4; 18.6; 18.8];
y = [0; 0.198669; 0.389418; 0.564642; 0.717356; 0.841471; 0.932039; 0.98545; 0.999574; 0.973848; 0.909297; 0.808496; 0.675463; 0.515501; 0.334988; 0.14112; -0.0583741; -0.255541; -0.44252; -0.611858; -0.756802; -0.871576; -0.951602; -0.993691; -0.996165; -0.958924; -0.883455; -0.772764; -0.631267; -0.464602; -0.279415; -0.0830894; 0.116549; 0.311541; 0.494113; 0.656987; 0.793668; 0.898708; 0.96792; 0.998543; 0.989358; 0.940731; 0.854599; 0.734397; 0.584917; 0.412118; 0.22289; 0.0247754; -0.174327; -0.366479; -0.544021; -0.699875; -0.827826; -0.922775; -0.980936; -0.99999; -0.979178; -0.919329; -0.822829; -0.693525; -0.536573; -0.358229; -0.165604; 0.033623; 0.23151; 0.420167; 0.592074; 0.740376; 0.859162; 0.943696; 0.990607; 0.998027; 0.965658; 0.894791; 0.788252; 0.650288; 0.486399; 0.303118; 0.107754; -0.0919069; -0.287903; -0.472422; -0.638107; -0.778352; -0.887567; -0.961397; -0.9969; -0.992659; -0.948844; -0.867202; -0.750987; -0.604833; -0.434566; -0.246974; -0.0495356];
plot(x, y, '--b');

x = [0; 0.2; 0.4; 0.6; 0.8; 1; 1.2; 1.4; 1.6; 1.8; 2; 2.2; 2.4; 2.6; 2.8; 3; 3.2; 3.4; 3.6; 3.8; 4; 4.2; 4.4; 4.6; 4.8; 5; 5.2; 5.4; 5.6; 5.8; 6; 6.2; 6.4; 6.6; 6.8; 7; 7.2; 7.4; 7.6; 7.8; 8; 8.2; 8.4; 8.6; 8.8; 9; 9.2; 9.4; 9.6; 9.8; 10; 10.2; 10.4; 10.6; 10.8; 11; 11.2; 11.4; 11.6; 11.8; 12; 12.2; 12.4; 12.6; 12.8; 13; 13.2; 13.4; 13.6; 13.8; 14; 14.2; 14.4; 14.6; 14.8; 15; 15.2; 15.4; 15.6; 15.8; 16; 16.2; 16.4; 16.6; 16.8; 17; 17.2; 17.4; 17.6; 17.8; 18; 18.2; 18.4; 18.6; 18.8];
y = [-1; -0.980133; -0.921324; -0.825918; -0.697718; -0.541836; -0.364485; -0.172736; 0.0257666; 0.223109; 0.411423; 0.583203; 0.731599; 0.850695; 0.935744; 0.983355; 0.991629; 0.960238; 0.890432; 0.784994; 0.648128; 0.48529; 0.302972; 0.108443; -0.0905427; -0.286052; -0.470289; -0.635911; -0.776314; -0.885901; -0.960303; -0.996554; -0.993208; -0.950399; -0.869833; -0.754723; -0.609658; -0.44042; -0.253757; -0.057111; 0.141679; 0.334688; 0.514221; 0.673121; 0.805052; 0.904756; 0.968256; 0.993023; 0.978068; 0.923987; 0.832937; 0.708548; 0.555778; 0.380717; 0.190346; -0.00774649; -0.205663; -0.395514; -0.56973; -0.721365; -0.844375; -0.933855; -0.986238; -0.999436; -0.972923; -0.907755; -0.806531; -0.673287; -0.513333; -0.333047; -0.139617; 0.0592467; 0.255615; 0.44166; 0.609964; 0.753818; 0.867487; 0.946439; 0.987526; 0.989111; 0.95113; 0.875097; 0.764044; 0.622398; 0.455806; 0.27091; 0.0750802; -0.123876; -0.318026; -0.499631; -0.66145; -0.797032; -0.900972; -0.969126; -0.998776];
plot(x, y, '-r');

hold off

title('My plot title');
xlabel('My x-axis title');
ylabel('My y-axis title');
Optional args in MATLAB functions
https://stackoverflow.com/questions/6764062/optional-args-in-matlab-functions | Tag: matlab

Votes: 61

There are a few different options on how to do this. The most basic is to use varargin, and then use nargin, size etc. to determine whether the optional arguments have been passed to the function.

% Function that takes two arguments, X & Y, followed by a variable 
% number of additional arguments
function varlist(X,Y,varargin)
   fprintf('Total number of inputs = %d\n',nargin);

   nVarargs = length(varargin);
   fprintf('Inputs in varargin(%d):\n',nVarargs)
   for k = 1:nVarargs
      fprintf('   %d\n', varargin{k})
   end
A little more elegant looking solution is to use the inputParser class to define all the arguments expected by your function, both required and optional. inputParser also lets you perform type checking on all arguments.

How can I count the number of elements of a given value in a matrix?
https://stackoverflow.com/questions/2880933/how-can-i-count-the-number-of-elements-of-a-given-value-in-a-matrix | Tag: matlab

Votes: 100

Have a look at Determine and count unique values of an array.

Or, to count the number of occurrences of 5, simply do

sum(your_matrix == 5)
Why is 24.0000 not equal to 24.0000 in MATLAB?
https://stackoverflow.com/questions/686439/why-is-24-0000-not-equal-to-24-0000-in-matlab | Tag: matlab

Votes: 100

The problem you're having relates to how floating-point numbers are represented on a computer. A more detailed discussion of floating-point representations appears towards the end of my answer (The "Floating-point representation" section). The TL;DR version: because computers have finite amounts of memory, numbers can only be represented with finite precision. Thus, the accuracy of floating-point numbers is limited to a certain number of decimal places (about 16 significant digits for double-precision values, the default used in MATLAB).

Actual vs. displayed precision
Now to address the specific example in the question... while 24.0000 and 24.0000 are displayed in the same manner, it turns out that they actually differ by very small decimal amounts in this case. You don't see it because MATLAB only displays 4 significant digits by default, keeping the overall display neat and tidy. If you want to see the full precision, you should either issue the format long command or view a hexadecimal representation of the number:

>> pi
ans =
    3.1416
>> format long
>> pi
ans =
   3.141592653589793
>> num2hex(pi)
ans =
400921fb54442d18
Initialized values vs. computed values
Since there are only a finite number of values that can be represented for a floating-point number, it's possible for a computation to result in a value that falls between two of these representations. In such a case, the result has to be rounded off to one of them. This introduces a small machine-precision error. This also means that initializing a value directly or by some computation can give slightly different results. For example, the value 0.1 doesn't have an exact floating-point representation (i.e. it gets slightly rounded off), and so you end up with counter-intuitive results like this due to the way round-off errors accumulate:

>> a=sum([0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1]);  % Sum 10 0.1s
>> b=1;                                               % Initialize to 1
>> a == b
ans =
  logical
   0                % They are unequal!
>> num2hex(a)       % Let's check their hex representation to confirm
ans =
3fefffffffffffff
>> num2hex(b)
ans =
3ff0000000000000
How to correctly handle floating-point comparisons
Since floating-point values can differ by very small amounts, any comparisons should be done by checking that the values are within some range (i.e. tolerance) of one another, as opposed to exactly equal to each other. For example:

a = 24;
b = 24.000001;
tolerance = 0.001;
if abs(a-b) < tolerance, disp('Equal!'); end
will display "Equal!".

You could then change your code to something like:

points = points((abs(points(:,1)-vertex1(1)) > tolerance) | ...
                (abs(points(:,2)-vertex1(2)) > tolerance),:)
Floating-point representation
A good overview of floating-point numbers (and specifically the IEEE 754 standard for floating-point arithmetic) is What Every Computer Scientist Should Know About Floating-Point Arithmetic by David Goldberg.

A binary floating-point number is actually represented by three integers: a sign bit s, a significand (or coefficient/fraction) b, and an exponent e. For double-precision floating-point format, each number is represented by 64 bits laid out in memory as follows:

enter image description here

The real value can then be found with the following formula:

enter image description here

This format allows for number representations in the range 10^-308 to 10^308. For MATLAB you can get these limits from realmin and realmax:

>> realmin
ans =
    2.225073858507201e-308
>> realmax
ans =
    1.797693134862316e+308
Since there are a finite number of bits used to represent a floating-point number, there are only so many finite numbers that can be represented within the above given range. Computations will often result in a value that doesn't exactly match one of these finite representations, so the values must be rounded off. These machine-precision errors make themselves evident in different ways, as discussed in the above examples.

In order to better understand these round-off errors it's useful to look at the relative floating-point accuracy provided by the function eps, which quantifies the distance from a given number to the next largest floating-point representation:

>> eps(1)
ans =
     2.220446049250313e-16
>> eps(1000)
ans =
     1.136868377216160e-13
Notice that the precision is relative to the size of a given number being represented; larger numbers will have larger distances between floating-point representations, and will thus have fewer digits of precision following the decimal point. This can be an important consideration with some calculations. Consider the following example:

>> format long              % Display full precision
>> x = rand(1, 10);         % Get 10 random values between 0 and 1
>> a = mean(x)              % Take the mean
a =
   0.587307428244141
>> b = mean(x+10000)-10000  % Take the mean at a different scale, then shift back
b =
   0.587307428244458
Note that when we shift the values of x from the range [0 1] to the range [10000 10001], compute a mean, then subtract the mean offset for comparison, we get a value that differs for the last 3 significant digits. This illustrates how an offset or scaling of data can change the accuracy of calculations performed on it, which is something that has to be accounted for with certain problems.

What is your favourite MATLAB/Octave programming trick?
https://stackoverflow.com/questions/132092/what-is-your-favourite-matlab-octave-programming-trick | Tag: matlab

Votes: 39

Using the built-in profiler to see where the hot parts of my code are:

profile on
% some lines of code
profile off
profile viewer
or just using the built in tic and toc to get quick timings:

tic;
% some lines of code
toc;
Unit testing/continuous integration with Simulink/Stateflow
https://stackoverflow.com/questions/7335266/unit-testing-continuous-integration-with-simulink-stateflow | Tag: simulink

Votes: 9

EDIT: This is now much easier and getting easier all the time with the Jenkins plugin for MATLAB

ORIGINAL ANSWER:

As Craig mentioned there is indeed a framework in MATLAB introduced in R2013a. Furthermore, this framework added a TAPPlugin in R2014a which outputs the Test Anything Protocal. Using that protocol you can set up your CI build with a TAPPlugin (eg. Jenkins, TeamCity) so that the CI system can fail the build if the tests fail.

Your CI build may look like a shell command to start MATLAB and run all your tests:

/your/path/to/matlab/bin/matlab -nosplash -nodisplay -nodesktop -r "runAllMyTests"
Then the runAllMyTests creates the suite to run and runs it with the tap output being redirected to a file. You'll need to tweak specifics here, but perhaps this can help you get started:

function runAllMyTests

import matlab.unittest.TestSuite;
import matlab.unittest.TestRunner;
import matlab.unittest.plugins.TAPPlugin;
import matlab.unittest.plugins.ToFile;

try
    % Create the suite and runner
    suite = TestSuite.fromPackage('packageThatContainsTests', 'IncludingSubpackages', true);
    runner = TestRunner.withTextOutput;
    
    % Add the TAPPlugin directed to a file in the Jenkins workspace
    tapFile = fullfile(getenv('WORKSPACE'), 'testResults.tap');
    runner.addPlugin(TAPPlugin.producingOriginalFormat(ToFile(tapFile)));

    runner.run(suite); 
catch e;
    disp(e.getReport);
    exit(1);
end;
exit force;
EDIT: I used this topic as the first two posts of a new developer oriented blog launched this year

Difference between a Simulink library and a model reference
https://stackoverflow.com/questions/7081900/difference-between-a-simulink-library-and-a-model-reference | Tag: simulink

Votes: 11

The main purpose of libraries and model reference are the same: facilitate the reuse of simulink models. When you work with libraries, simulink "imports" the content of the referenced models in to the main model. Sometimes, this leads to the developer dealing with gigantic models (more than 50k blocks), which can be time consuming. When you are designing a library, the lib file cannot be run. You have to "instantiate" it in the main model. On the other side, model reference deals with separated models. They are put together when you press the simulate button, but during the design time, you deal with completely separated models. With model reference, you can also select acceleration methods (it basically compiles the model) and this can't be done with libraries.

Simulink for Python
https://stackoverflow.com/questions/32345638/simulink-for-python | Tag: simulink

Votes: 21

SimuPy is a farily recent framework has similar features as simulink. There is a SciPy 2018 presenation on it.

Matlab Simulink version control with multiple developers
https://stackoverflow.com/questions/1788646/matlab-simulink-version-control-with-multiple-developers | Tag: simulink

Votes: 6

Text merging of Simulink model files will be difficult. Here's an article which gives some information on configuration management when using Simulink.

As for diffs, there is a differencing tool in the Simulink Report Generator starting I believe in R2008b+. Here's a link to the doc for that feature.

Mike

Information about Simulink MDL and SLX formats?
https://stackoverflow.com/questions/23408186/information-about-simulink-mdl-and-slx-formats | Tag: simulink

Votes: 12

Very little information is publicly available. Here's the little I've found:

MDL and SLX are MathWorks proprietary file formats for storing Simulink models. SLX was introduced in Simulink R2012a and made the default file format in R2012b. Besides the file structure, the content of SLX and MDL files are very similar. For example, key-value pairs appear to be the same between the two formats. People often say that parsing these files is a bad idea because they can change between Simulink versions (see e.g. am304 and my comments above), but I have not seen much evidence of this.

The MDL format seems to have been developed in-house at MathWorks. There seems to have been an MDL parser for python, but it was of limited functionality, and the website is down as of May 2014.

An SLX file is a zip file containing a collection of XML files, with most of the model specification stored in simulink/blockdiagram.xml. @am304 pointed out this information from the MathWorks website:

SLX is a compressed package that conforms to the Open Packaging Conventions (OPC) interoperability standard. SLX stores model information using Unicode® UTF-8 in XML and other international formats. Saving Simulink models in the SLX format:

Typically reduces file size compared to MDL. The file size reduction between MDL and SLX varies depending on the model.

Solves some problems in previous releases with loading and saving MDL files containing Korean and Chinese characters.

Enables incremental loading and saving. Simulink optimizes performance and memory usage by loading only required parts of the model and saving only modified parts of the model.

Here are a few more references besides the ones in the text above:
How convert simulink files to XML
http://www.scootersoftware.com/vbulletin/showthread.php?t=11568
http://blog.xogeny.com/blog/dont-zip/
http://blog.developpez.com/matlab/p11469/simulink-2/nouveau-format-slx-pour-les-modeles-simulink

Modelica vs Simscape
https://stackoverflow.com/questions/46155030/modelica-vs-simscape | Tag: simulink

Votes: 18

Well, since nobody seems to be answering this, I will take a shot at it.

It seems that you seem to have figured out the question to your first question. The basic answer is that causal modeling involves lots of upfront work by you that could otherwise be done by the compiler. Even worse, if you ever want to support different causalities, you need to either re-implement your component and/or have multiple versions supporting different causalities. Modeling complex physics that mix continuous and discrete behavior is tricky enough without having to do all this tedious, time-consuming and error prone work sorting out the causalities.

So that brings me to your second question of SimScape vs. Modelica. SimScape seems to be a recognition of the issues I mentioned in the previous paragraph. Honestly, it will be difficult for a third party to provide you with an analysis of SimScape vs. Modelica since so much depends on factors that may be different for you vs. other people.

Furthermore, I really haven't used SimScape much so I cannot really comment on so much there. But I can certainly tell you Modelica's strength. Modelica was developed by a design group composed in approximately equal parts of developers, users and academics. I think this is actually its great hidden strength of Modelica. As such, new features had to have support from all groups to be successful. Too much influence by one group is, in my opinion, detrimental.

The openness of Modelica means you can get Modelica support from lots of different tools (free and commercial). This, in turn, means that there are lots of different libraries out there. This openness is not just about the specification itself but about the eco-system (open tools, open libraries, etc).

Finally, the proof is really seeing all the various types of problems people are solving. Modelica is used in a wide range of engineering domains to solve really diverse problems. This is, in my opinion, a testament to the soundness of the design of the language and libraries. That success is not the result of lots of marketing dollars but rather a consequence of the fact that the technology is fundamentally powerful and that people around the world have recognized this and used it to solve real world problems...over and over again.

I would encourage you to look through the papers from past Modelica conferences. Every paper is available, for free, online at modelica.org.

Shameless plug: if you want to learn Modelica via examples from a wide range of engineering disciplines, you might want to check out the free, interactive and online book Modelica by Example.

Extensive comparison between SIMULINK and LabVIEW
https://stackoverflow.com/questions/17185249/extensive-comparison-between-simulink-and-labview | Tag: simulink

Votes: 19

I used labVIEW from 1995, and Simulink from 2000. Now I am involved in control system design, and simulation of robotic systems using labVIEW Real Time and automotive ECUs using MATALAB/Simulink/DSPACE .

LabVIEW is focus on measurement systems, and MATLAB/SIMULINK in dynamic simulation, so,

If you run complex simulations, and your work is create/debug complex simulation models of controllers or plants, use Simulink+RealTimeWorkShop+StateFlowChart. LabVIEW has no eficient code generators for dynamic simulation. RTW generates smaller and fastest code.

If your main work is developing systems with controllers and GUI for machines, or you want to deploy the controllers on field, use labVIEW.

If your main work is developing flexible HIL or SIL systems, with a good GUI, you can use VeriStand. Veristand can mix Simulink and LabVIEW code.

And if you have a big budget ( VERY BIG ) and you are working in automotive control prototypes, DSPACE hardware is a very good choice for fast development of automotive ECUS, or OPAL to develope electric power circuits. But only for prototype or HIL testing of controllers.

From the point of view of COTS hardware: Mathworks don´t manufacture hardware -> Matlab/Simulink support hardware from several vendors.

National Instruments produce/sell hardware->LabVIEW Real Time is focused in support NationalInstruments hardware. There are no COTS full replacement.

Connection through COM port between host and guest in VirtualBox
https://stackoverflow.com/questions/37728628/connection-through-com-port-between-host-and-guest-in-virtualbox | Tag: simulink

Votes: 17

First of all, VirtualBox won't create a serial port for your host. So you have to create two virtual COM ports on the host using some other software and bridge these two ports virtually. Then use one port to connect to Simulink and other must be setup in such a way that VM COM port uses this port.

For creating a virtual COM port on Windows I will be using com0com from Faking an RS232 Serial Port. You can use any software you like.

After installing com0com, open setuppg.exe from C:\Program Files (x86)\com0com.

Enter image description here

Now click apply. Now you will have COM9 and COM10 bridged (it's like COM9 and COM10 are internally connected).

Next we need to connect COM9 port in Host to COM1 port in Guest OS for that open Oracle VM VirtualBox Manager and open the settings of your required virtual machine. Now, select Serial Ports and setup like shown below and click OK.

Enter image description here

NOTE: Windows provides legacy names only for COM ports 1 through to 9. For all other COM ports you must use the full device naming convention under Windows. So if you decide to use COM10 instead of COM9, using COM10 at Path/Address won't work. Instead you have to use \\.\COM10.

Now start your virtual machine, and your ports are ready. Now ports will be shown in Simulink and connect to COM10 in this scenario and in the virtual machine, connect your QGroundControl station to COM1.

Simulink <--> COM10 (Host)

COM10 (Host) <--> COM9 (Host) >> Connected using com0com

COM9 (Host) <--> COM1 (Guest) >> Connected by Oracle VM VirtualBox

COM1 (Guest) <--> QGroundControl station

How do I provide input to a Simulink model without placing it in the workspace
https://stackoverflow.com/questions/5279199/how-do-i-provide-input-to-a-simulink-model-without-placing-it-in-the-workspace | Tag: simulink

Votes: 12

It's not obvious, but you can input/output data from the sim() command and a calling function's workspace. I've done it before & have an example at work but can't get there until Monday to verify. However, try the solution listed on Mathworks's site:

Solution:

When using variable mask parameters in Simulink, the base workspace is the default source workspace of Simulink. However, by using the SIMSET command, this workspace can be changed. SIM is then used with this options structure created by SIMSET. The following is an example on how to do this.

  options = simset('SrcWorkspace','current');
  sim('modelname',[],options)
...although apparently this got deprecated in R2009b due to incompatibility with the Parallel Computing Toolbox >:( Looks like the correct solution is to explicitly push variables into the simulation's model workspace (different than the base workspace), using assignin().

http://www.mathworks.com/matlabcentral/newsreader/view_thread/292544

You have 2 options:

For releases before R2009b, look at the SIMSET documentation. It allows you to set the "SrcWorkspace" property to "current" to use the data from your function.
http://www.mathworks.com/support/solutions/en/data/1-1BWDA/?solution=1-1BWDA

In newer releases, this option is deprecated because it is not compliant with the Parallel Computing Toolbox and PARFOR. What I recommend is:
http://www.mathworks.com/support/solutions/en/data/1-ASPEIV/?solution=1-ASPEIV

Diff between Simulink models .slx
https://stackoverflow.com/questions/34356401/diff-between-simulink-models-slx | Tag: simulink

Votes: 15

I found a solution to my problem.

If you are in your repository you MUST have a .git folder.
Go to this folder and open the file config (create it if it is not available, but it should be there normally).
Add the following code to the file:

[diff "slx"]
textconv = unzip -c -a
Then you need to create or modify the file REPOSITORY/.gitattributes and add:

*.slx diff=slx
In this way when you do a git diff on a Simulink model (.slx) you will have a quite readable result.

I hope it will help someone else.

How to export simulink data to workspace during simulation?
https://stackoverflow.com/questions/17005899/how-to-export-simulink-data-to-workspace-during-simulation | Tag: simulink

Votes: 12

Use get_param to read data from just at the current time. Also to send the data back to Simulink with set_param of a gain or another block.

An example of get_param

First load and start the simulation:

load_system('myModel')
set_param('myModel','SimulationCommand','Start');
To read data on any line of your simulink model:

Get a simulink block object (let's try a Clock with the name Clock):

block = 'myModel/Clock';
rto = get_param(block, 'RuntimeObject');
Then get the data on its first (or any) output port (or input) of that block.

time = rto.OutputPort(1).Data;
You could do the reading, in a timer callback.

Also this might be helpful: Command Line Functionality for Simulink

How does Simulink simulation engine work?
https://stackoverflow.com/questions/3884948/how-does-simulink-simulation-engine-work | Tag: simulink

Votes: 4

Before the first cycle, it figures out the order of execution of the blocks (starting with the ones that don't require inputs from any other blocks)

Each cycle, it calculates the output of each block based on the inputs and the block's code. Each block's code is static, it mostly existed before you put the model together. (I don't know if block options actually change the code, or if they are evaluated only at runtime, at each iteration.)

If the simulation step is variable, than each cycle it calculates the size of the next step, based mainly on how fast the model's variables are changing. The faster they change, the smaller the step size should be, so a briefly high derivative isn't assumed to last much longer than it should. (I don't know the details of this calculation, perhaps someone else can shed a light?) So, "continuous" simulation, or variable-step, only means Simulink will make an educated guess each cycle about what step size is small enough to keep time quantization error at an acceptable level. Truly continuous simulation is literally impossible over a completely digital hardware, such as your computer's processor.

What's the difference between stateflow and simulink?
https://stackoverflow.com/questions/12478683/whats-the-difference-between-stateflow-and-simulink | Tag: simulink

Votes: 14

Simulink is largely a controls oriented solution. It graphically depicts math like products, sums, integrals, etc. However, it's conditional logic facility is lacking. Any kind of if construct quickly becomes terse and unmanageable in my opinion. I've seen many models, and there is a clear line here where Simulink should end and Stateflow should start.

Stateflow deals extremely well with logic and, of course, state machines. Now with the addition of the Simulink Function blocks within Stateflow, we have a powerful combination to allow the state machine in Stateflow direct the rest of the program.

As far as functionality goes, they are both functionally complete, meaning anything you can code in C, you can code in Simulink or Stateflow. However, I would not recommend coding a PID loop in Stateflow, but it's possible. You could also easily create a state machine in Simulink, but I'd advise against it.

As far as code generation; in the beginning of the meld, the Stateflow and Simulink had separate code generators that were sewed together with more Simulink generated C code at code generation time. Then came CGIR (Code Generation Intermediary Representation), which unifies the code generator between Stateflow and Simulink. It came around 2007, and has continued to deliver substantial increases in performance. Generated code has increased in on target performance to a point where companies can use the code in their embedded systems and actually get a performance benefit rather than take a small hit. Also, the time to generate the code has also decreased substantially. CGIR is a replacement for the Target Language Compiler, however, never fear, TLC API will still be available, perhaps forever for those who have developed massive libraries of proprietary code generation libraries.

Hope this helps, let me know if something sounds fishy or if I need to clarify.

Find unused variables and functions in a MATLAB-Simulink project
https://stackoverflow.com/questions/4678085/find-unused-variables-and-functions-in-a-matlab-simulink-project | Tag: simulink

Votes: 8

Instead of going through the tedious (and potentially error-prone) task of pasting all of your m-files into one to run MLINT, you have a few other options...

If you have all your files in one folder, the simplest approach is to go to the Current Folder browser, click the Actions button alt text, and then select Reports > Code Analyzer Report.

alt text

This will open a new window displaying the MLINT results for each m-file in the current directory:

alt text

If you would rather automate the process using a script instead of having to click through menu options, there are a couple of submissions on the MathWorks File Exchange (here and here) that appear to work recursively on a directory structure as opposed to just a single directory.

In additional, here is some sample code that will do what you want for a single directory:

dirData = dir;                 %# Get data on the current directory contents
fileIndex = ~[dirData.isdir];                 %# Get an index for the files
fileNames = {dirData(fileIndex).name};        %# Get the file names
[~,~,ext] = cellfun(@fileparts,fileNames,...  %# Get the file extensions
                    'UniformOutput',false);
mFileIndex = strcmp(ext,'.m');                %# Get an index for the m-files
cellfun(@mlint,fileNames(mFileIndex));        %# Run MLINT on each m-file
You could extend the collection of file names (and paths) in this way to operate recursively on a directory tree, then run MLINT on the resulting set of files you collect.

Disable/Comment a block in Simulink
https://stackoverflow.com/questions/7309252/disable-comment-a-block-in-simulink | Tag: simulink

Votes: 8

I just wanted to add that in Simulnk 2012b, it is now possible to explicitly comment out blocks. Simply right-click on the block and select the option "Comment Out".

When run, the model will act as if the commented out block is not there at all. This means that input/output signals to/from this block are essentially just left open. So for example, if you commented out a gain block, the input signal would not simply pass through to the output signal.

Simulink: PID Controller - difference between back-calculation and clamping for anti-windup?
https://stackoverflow.com/questions/18654853/simulink-pid-controller-difference-between-back-calculation-and-clamping-for | Tag: simulink

Votes: 6

Additionally to am304's answer there are some more things to consider.

Clamping
Clamping will always work. It detects when there is integrator overflow and sets the integral path of the PID-controller to zero to avoid windup by using a simple switch.

Clamping is a commonly used anti windup method, especially in case of digital control systems. In serious applications however, there is also forward clamping involved - evaluating the controller input as well. This mechanism must me implemented manually.

Back Calculation
Back Calculation highly depends on the back calculation coefficient Kb. If you don't know how to actually calculate the parameter Kb don't use back-calculation. This method calculates the difference between the actual controller output and the saturated output and subtracts it from the I-Gain path, amplified by Kb. In most of cases the default value Kb = 1 will lead to worse results than clamping, it is even possible that it has no effect at all. Kb should be calculated based on the sampling time or in case a D-Gain is involved, based on D- and I-Gain. Appropriate literature should be consulted to calculate the coefficient. Back calculation with a properly set coefficient may enables better dynamics than clamping!

Back calculation basically is a relict of past times, when sampling times have been large, logical circuits have been expensive and analogue implementations of Kb were superior to clamping circuits. So under the condition that the sampling time is >10 times larger than the systems time constant, clamping is most likely the better and easier choice in most cases.

enter image description here

Kalman filter in computer vision: the choice of Q and R noise covariances
https://stackoverflow.com/questions/21245167/kalman-filter-in-computer-vision-the-choice-of-q-and-r-noise-covariances | Tag: simulink

Votes: 7

R is the covariance matrix of the measurement noise, assumed to be Gaussian. In the context of tracking objects in video it means your detection error. Let's say you are using a face detector to detect faces, and then you want to track them using the Kalman filter. You run the detector, you get a bounding box for each face, and then you use the Kalman filter to track the centroid of each box. The R matrix must describe how uncertain you are about the location of the centroid. So in this case for the x,y coordinates the corresponding diagonal values of R should be a few pixels. If your state includes velocity, then you need to guess the uncertainty of the velocity measurement, and take the units into account. If your position is measured in pixels and your velocity in pixels per frame, then the diagonal entries of R must reflect that.

Q is the covariance of the process noise. Simply put, Q specifies how much the actual motion of the object deviates from your assumed motion model. If you are tracking cars on a road, then the constant velocity model should be reasonably good, and the entries of Q should be small. If you are tracking people's faces, they are not likely to move with a constant velocity, so you need to crank up Q. Again, you need to be aware of the units in which your state variables are expressed.

So this is the intuition. In practice you start with some reasonable initial guess for R and Q, and then you tune them experimentally. So setting R and Q is a bit of an art. Also, in most cases using diagonal matrices for R and Q is sufficient.

Here is an example that uses the vision.KalmanFilter in Matalb for tracking multiple people.

In Simulink, are Goto and From blocks generally considered bad style?
https://stackoverflow.com/questions/20204253/in-simulink-are-goto-and-from-blocks-generally-considered-bad-style | Tag: simulink

Votes: 7

The Mathworks Automotive Advisory Board has published some modeling guidelines (PDF) that include usage of Goto/From. The rules they list are:

Do not have subsystems that are floating, i.e. all inputs / output ports are connected via Gotos. One of the great things about Simulink is the ability to determine signal flow with only a cursory visual inspection, do not destroy this by linking everything with Gotos. At least have one feed-forward and one feedback loop between subsystems connected by signal lines.

My personal opinion on feedback signals is that they should all be connected with signal lines, but I'm sure you can come up with cases where drawing all of them clutters the model.

The second guideline is about the scope of the Goto tag; keep the visibility local as much as possible.

I feel setting visibility to scoped is acceptable also as long as you're not using the matching From more than a couple of levels downstream from the Goto. I've yet to come across a legitimate need for a global Goto tag.
So, all Goto usage isn't bad, and you're right that it can improve readability in some cases. That being said, I don't think Gotos are justified for the picture above. I realize it is just an example, but I should point out that if the buses being created are virtual that order of the inputs at the creator doesn't matter, and rearranging Bus Create and Mux block inputs can work wonders for readability.

The problem with the guidelines above are that there's room for bending them, and developers on your team might do just that. Even if everyone is diligent about following them at first, you may run afoul of these guidelines one day, a long time from now, when you redraw that section of the model for refining / adding functionality. Rearranging inputs and outputs can be especially irritating in middle of implementing some cool new feature. That may be the reason your employer chose to impose a blanket ban. It is inconvenient in some cases, but is easier to enforce.

Iterate through a structure in MATLAB without 'fieldnames'
https://stackoverflow.com/questions/24285088/iterate-through-a-structure-in-matlab-without-fieldnames | Tag: simulink

Votes: 3

When generating code using MATLAB Coder or Simulink Coder, not only are cell arrays disallowed, but also referencing fields of a structure using dynamic names.

Since you can't use dynamic names, you should probably just repeat the content of your loop body multiple times, once for each field name, which (since you're not using dynamic names) you would know in advance.

Although this might be cumbersome from a programming point of view, I would guess it's likely to be slightly faster anyway when you generate code from it, as the code generation process should probably unroll the loop anyway.

Convert function to Simulink block
https://stackoverflow.com/questions/2225248/convert-function-to-simulink-block | Tag: simulink

Votes: 3

There's a video here that shows some options. Basically, use the MATLAB Function block. Or, if you want to keep the code separate (and don't care about code generation), you can use the MATLAB Interpreted Function block.

What files should I add to the .gitignore when using MATLAB and Simulink?
https://stackoverflow.com/questions/31857606/what-files-should-i-add-to-the-gitignore-when-using-matlab-and-simulink | Tag: simulink

Votes: 20

Github has a nice gitignore repo

Specifically for Matlab projects, the template is:

##---------------------------------------------------
## Remove autosaves generated by the Matlab editor
## We have git for backups!
##---------------------------------------------------

# Windows default autosave extension
*.asv

# OSX / *nix default autosave extension
*.m~

# Compiled MEX binaries (all platforms)
*.mex*

# Simulink Code Generation
slprj/

# Session info
octave-workspace

# Simulink autosave extension
.autosave
How to flip a Simulink block VERTICALLY?
https://stackoverflow.com/questions/20488602/how-to-flip-a-simulink-block-vertically | Tag: simulink

Votes: 6

Generally you can rotate and flip every block like desired and the ports are rotated accordingly. Some blocks like this little 'add'-bubble requires special syntax like |+- or -|+- though.

In some very rare cases the rotation of the ports is disabled. I don't have your block, but you can check the following:

click on the block
switch to the Matlab command prompt and type inspect(gcbh)
Have a look at the MaskPortRotate and PortRotationType properties, whether there are set to default If not you can try to change that. But I'm not sure if that's possible for in-built blocks.

Programatically:

h1 = get_param('modelName/BlockName','handle')
h2 = get_param('modelName/BlockName','handle')
inspect(h1)
inspect(h2)
and then you can use set_param to change the properties.

set_param(h1,'PortRotationType',...)
set_param(h2,'MaskPortRotate',...)
But it possibly could not work and I don't have your block to try it out. But thats the way to go, otherwise it is not possible.

A workaround could be to put your block in subsystem and mask it with the parameters of the underlying block. Then the rotation is working.

Efficient colon operator for multiple start and end points
https://stackoverflow.com/questions/38501128/efficient-colon-operator-for-multiple-start-and-end-points | Tag: simulink

Votes: 5

Here's a vectorized approach based on cumulative summation -

% Get lengths of each group
lens = end_idx - start_idx + 1;

% Determine positions in o/p array where groups would shift
shift_idx = cumsum(lens(1:end-1))+1

% Initialize ID array and at shifting positions place strategically created
% numbers, such that when ID array is cumulatively summed would result in
% desired "ramped" array
id_arr = ones(1,sum(lens));
id_arr([1 shift_idx]) = [start_idx(1) start_idx(2:end) - end_idx(1:end-1)];
out = cumsum(id_arr)
Sample run -

start_idx =
     6     8    13
end_idx =
    11    11    15
out =
     6     7     8     9    10    11     8     9    10    11    13    14    15
switch-case with multiple matches in matlab for code generation
https://stackoverflow.com/questions/31647777/switch-case-with-multiple-matches-in-matlab-for-code-generation | Tag: simulink

Votes: 9

Matlab coder does not support 'cell arrays', and has a limited set of functions it can handle. Remember than C is not as flexible as Matlab, specially regarding the type of data it handles. C does not do dynamic type (a structure should be defined once and the definition cannot change in the code). So Matlab cannot let you use cell array which is very loosely typed and where the next element you would add to your cell array would be of different type than the other ones.

So there will be cases where you will have to explicit things for Matlab if you expect it to convert it into possible C language.

For your case, different options:

Explicit list directly in case statement
If you do not have to reuse a for comparison too often, you can replace case a with an explicit list like case {2,3,4,5}:

function test_coder(b)
switch b
    case {2,3,4,5}
        disp yay
    otherwise
        disp boo
end
It looks like a cell array but it isn't. Because it is explicit enough (the variable just hold 4 double type) Matlab will internally use an array and compare b to each element (it will "expand" the case statements). Indeed, this part of the generated code look like (pure C way):

  guard1 = FALSE;
  switch ((int32_T)emlrtIntegerCheckFastR2012b(b, &emlrtDCI, emlrtRootTLSGlobal))
  {
   case 2:
    guard1 = TRUE;
    break;

   case 3:
    guard1 = TRUE;
    break;

   case 4:
    guard1 = TRUE;
    break;

   case 5:
    guard1 = TRUE;
    break;
... // and so on
use ismember with arrays.
The function ismember is supported by the code generator. So the code below works too:

function test_coder(b)

a=[2 3 4 5] ; %// define array "a"
c=[8 9 10]  ; %// define array "c"

if ismember(b,a)
    disp yay
elseif ismember(b,c)
    disp youhou
else
    disp boo

end
Note however that the coder requires the arrays sent to ismember to be sorted otherwise it will throw an error.

This works if you have a lot of comparison to do, however given the complexity of the generated code, I would advise using ismember only when you really need it.
when your cases are simple enough I would recommend to go for explicit declarations of your cases (using the {...} "shortcut" if you need it.

Also be careful always to look at your generated code:
In you initial example, when you specify b=3 in the code, Matlab detect that, detect that the code will always flow this way so it wasn't even coding the comparison logic ... The generated code was just a quick disp yay ...

I had to place b as an input to get Matlab to actually code the comparison logic. To compile the code above, you have to specify which type the input variable b will be. So I compiled the above using:

codegen test_coder.m -args {0}
From SIMULINK to workspace FFT?
https://stackoverflow.com/questions/39598176/from-simulink-to-workspace-fft | Tag: simulink

Votes: 4

If you take a close look at your Sinewave variable, i.e. by simply typing its name in the command prompt, you will see the following:

  >>  Sinwave
  timeseries

  Common Properties:
            Name: ''
            Time: [51x1 double]
        TimeInfo: [1x1 tsdata.timemetadata]
            Data: [51x1 double]
        DataInfo: [1x1 tsdata.datametadata]

  More properties, Methods
It contains different fields, e.g. Time and Data, which are both arrays. We could simply try plotting these for example:

plot(Sinwave.Time, Sinwave.Data)
And indeed, this gives us a nice plot of your sine wave. We could now try replacing the variable t with Sinewave.Time and x with Sinewave.Data, which allows us to plot the PSD.

If you don't know the sampling frequency, you can use the Sinewave.TimeInfo - which contains the number of samples, and the start and end time, to calculate the sampling frequency Fs.

Responding to your edited question: the time vector t, which you create with your MATLAB code, is 0 : 0.001 : 0.999 and is of length 1000. Your Simulink simulation, however, runs from t=0 to t=1 in steps of 0.001, thus your resulting time- and data-vectors are of length 1001! The calculation assumes that the step size is 1/1001 instead of 1/1000, leading to different results. To solve that problem, change the Stop Time in the simulation setup to 0.999. Then, the resulting vectors are of correct size, and you get the same result as the MATLAB calculation.

resulting plot

Getting the solver type and step size (for fixed step solvers)
https://stackoverflow.com/questions/11868535/getting-the-solver-type-and-step-size-for-fixed-step-solvers | Tag: simulink

Votes: 4

You can get the current solver name using

get_param('modelName', 'SolverName');
Some of the other common solver parameters are

AbsTol
FixedStep
InitialStep
ZcThreshold
ExtrapolationOrder
MaxStep
MinStep
RelTol
SolverMode
You can find other parameters you may wish to query by opening the .mdl file in your favorite text editor and digging through it.

Integer to Binary Conversion in Simulink
https://stackoverflow.com/questions/5230914/integer-to-binary-conversion-in-simulink | Tag: simulink

Votes: 3

You can use a Conversion block to convert back and forth between binary (i.e. boolean) types and various integer (int8, uint8, int16, etc.) or floating point (single or double) types.

Will this technique reduce the MATLAB realtime workshop coder compilation time?
https://stackoverflow.com/questions/7013338/will-this-technique-reduce-the-matlab-realtime-workshop-coder-compilation-time | Tag: simulink

Votes: 3

You could try to put the offending subsystem into another model and use Model Reference. You can convert a subsystem to a Model block using Simulink.SubSystem.convertToModelReference.

Model Reference has incremental code generation, so as long as the model doesn't change, Simulink won't regenerate or recompile the code for the referenced model.

Make signal names coming from library links unique?
https://stackoverflow.com/questions/25975896/make-signal-names-coming-from-library-links-unique | Tag: simulink

Votes: 1

It was quite a challenge for me but looks like I kinda sorted it out. Matlab R2007a here. I'll do the example with an already done subsystem, with its inputs, outputs, ...

1- In Block Properties, add a tag to the block. This will be done to identify the block and its "siblings" among the system. MY_SUBSYSTEM for this example.

2- Block Properties again. Add the following snippet in CopyFcn callback:

%Find total amount of copies of the block in system

len = length(find_system(gcs,'Tag','MY_SUBSYSTEM'));

%Get handle of the block copied/added and name the desired signal accordingly   

v = get_param(gcb,'PortHandles');                                     
set(v.Outport(_INDEX_OF_PORT_TO_BE_RENAMED_),'SignalNameFromLabel',['BASENAME_HERE' num2str(len)]);
3- In _INDEX_OF_PORT_TO_BE_RENAMED_ you should put the port signal index (starting from 1) that you want to have renamed for each copy of the block. For a single output block this should be 1. BASENAME_HERE should be the port basename, in this case "Current" for you.

4- Add the block to the desired library, and delete the instance you used to create this example. From there on, as you add from the library or copy an existing block, the outport should name Current1, Current2, Current3, and so on. Notice that you could apply any convention or formatting.

Hope this helps. It worked for me, don't hesitate to ask/criticize!

Note: Obviously, as the model grows, this method may be computer-demanding as find_system will have to loop through the entire model, however looks like a good workaround for me in small-medium sized systems.

Increasing simulation time in a Monte Carlo simulation in Matlab/Simulink
https://stackoverflow.com/questions/20378812/increasing-simulation-time-in-a-monte-carlo-simulation-in-matlab-simulink | Tag: simulink

Votes: 1

As it seems that there is a limit to what one can do without feedback from the asker I will just post my comment as an answer:

My bet would be memory issues, if you want to eliminate this see whether the problem still occurs if you don't store the result in the first place, simply remove this line:

results{ii, 1} = numberOfMC;
Also confirm that you don't have other growing variables or that you accidentally make the input more complex as you go. It is probably not relevant, does the time also increase like this if you do all simulations in reversed order? Or if you do the full amount of iterations, but each time with exactly the same input?

Create Simulink block for Arduino library like liquidcrystal
https://stackoverflow.com/questions/12666945/create-simulink-block-for-arduino-library-like-liquidcrystal | Tag: simulink

Votes: 1

I'll turn my comment into an answer ... :)

Okay so to create a program from Simulink you'll need code generation tools installed. ver will tell you if you have Simulink Coder, and optionally Embedded Coder. If you're using an older version of MATLAB then it's called Real-time Workshop. Without one of those you're not going to be code-generating anything.

So assuming you can code-generate:

S-functions are they way to go: http://www.mathworks.co.uk/help/simulink/s-function-basics.html

... although there are various tools to assist with creating S-functions.

In short, the process is:

Take a copy of the sfunc_basic.c (or something like that) S-function C file template and populate accordingly. This is not trivial by any means, it can take quite a while to get it to compile (see below) and not crash MATLAB when it gets instantiated in a model.
Compile with mex command (see the documentation).
Use block in model. Create yourself a test harness model that does something very simple. Use the minimum model blocks necessary to create a working solution.
Create a TLC file which will define how to use block data at compile and run time in the model C program. In here you will be making calls to the liquidcrystal library.
Code generate / fix errors with TLC and or S-function / fix errors in generated code / repeat until complete :)
All of those steps can be expanded on a lot. The process is a bit of a haul the first time, but you'll learn a lot about S-functions, the model.RTW file, TLC and debugging all of the above.

Oh yes, debugging the S-function can be a ball-acher. Be prepared to use something like visual studio to "attach" to the matlab process to debug it.

Rich

Implementing custom MATLAB functions in Simulink
https://stackoverflow.com/questions/2729609/implementing-custom-matlab-functions-in-simulink | Tag: simulink

Votes: 1

You need to use the command eml.extrinsic to call any external MATLAB functions from an EML block. For example, you can put this at the top of your EML function,

eml.extrinsic('getLr', 'initializeLq');
to allow those functions to be called. For more information, see the documentation

transfer doubles between java and simulink using udp
https://stackoverflow.com/questions/36311156/transfer-doubles-between-java-and-simulink-using-udp | Tag: simulink

Votes: 0

i did a trick. 'Packet Input' Simulink block, and 'ASCII Decode', blocks connection

i adjust the parameters of these 2 blocks as follows:

the 'Packet Input' block

the 'ASCII Decoder

and in the java side, i 'reformat' the double, with this method:

public static String reformat(String str){
    double d = 0;
    DecimalFormat df=null;
    try {
        d = Double.parseDouble(str);
    } catch (NumberFormatException numberFormatException) {
        return "0.00000";
    }
    if(d>=0){
    String[] sp=str.split("\\.");
    if(sp[0].length()==0)
    df= new DecimalFormat("0.00000");
    if(sp[0].length()==1)
    df= new DecimalFormat("0.00000");
    if(sp[0].length()==2)
        df= new DecimalFormat("00.0000");
    if(sp[0].length()==3)
        df= new DecimalFormat("000.000");
    if(sp[0].length()==4)
        df= new DecimalFormat("0000.00");
    if(sp[0].length()==5)
        df= new DecimalFormat("00000.0");
    }
    else{
    String[] sp=str.split("\\.");
    if(sp[0].length()==1)
    df= new DecimalFormat("0.0000");
    if(sp[0].length()==2)
    df= new DecimalFormat("0.0000");
    if(sp[0].length()==3)
        df= new DecimalFormat("00.000");
    if(sp[0].length()==4)
        df= new DecimalFormat("000.00");
    if(sp[0].length()==5)
        df= new DecimalFormat("0000.0");
    if(sp[0].length()==6)
        df= new DecimalFormat("000000");
    }

    try {
        return df.format(d);
    } catch (Exception e) {
        return "0.00000";
    }
}
briefly: the packet input block receives 7 ASCIIs each time, and in java i reformat the double to be combined of 7 characters (including the point and the minus).

Hope this help someone.

update:

some self explanatory extra code:

//somewhere before:
//Global variables
    String defaultValue="0",ip="xxx.xx.xx.xx";
    DatagramSocket remoteSocket,localSocket;
    byte[] receiveArray,receiveKey,receiveSig,sendSig;
    int remoteSendPort=xxx,localSendport=xxx,
        remoteReceivePort=xxx,localReceivePort=xxx;    
    String feedback,control_val,ReceivedTimeStamp;
    InetAddress IPAddress;     
...
//receive message from the other java program in pc2 
    public  void remoteMsgSend(byte[] msg,InetAddress IPAddress, int PORT)  {     
        try {     
            DatagramPacket sendPacket = null;
            try {
                sendPacket = new DatagramPacket(msg, msg.length, IPAddress, PORT);
            } catch (Exception e) {
                System.out.printf("Error! check ports");
            }
            remoteSocket.send(sendPacket);
        } catch (IOException ex) {
            System.out.println("IOException! remote send");
        }
    }
    //receive message from the other java program in pc2
    public  String remoteMsgReceive() {                     
         DatagramPacket receivePacket = new DatagramPacket(receiveArray, receiveArray.length);
         byte[] r1;
         int count=0,len,offset;
           try {
               remoteSocket.receive(receivePacket);
               r1=receivePacket.getData();
               len=receivePacket.getLength();
               offset=receivePacket.getOffset();
               r1=Arrays.copyOfRange(r1, offset, len);
               remoteOk=true;
                return new String(r1);
                } catch (Exception ex) {
//                    System.out.println("remote receive time out: " +ex.getMessage());
                    remoteOk=false;
                    return defaultValue;
                }
     }

    //send data to matlab on this pc
    public  void localSend(String msg,int PORT)  {  
        DatagramPacket sendPacket = null;
        try {
            sendPacket = new DatagramPacket(msg.getBytes(), msg.getBytes().length, InetAddress.getLocalHost(), PORT);
        } catch (Exception e) {
            System.out.printf("Error! check ports");
        }
        try {
            localSocket.send(sendPacket);
        } catch (IOException ex) {
            System.out.println("localsend error");
        }
    }
    //receive data from Matlab on this pc
    public  String localReceive() {                     
         DatagramPacket receivePacket = new DatagramPacket(receiveArray, receiveArray.length);

         String rec;
           try {
               localSocket.receive(receivePacket);
               rec=new String(receivePacket.getData(),receivePacket.getOffset(),receivePacket.getLength());
               localOk=true;
                return rec;
                } catch (Exception ex) {
//                          System.out.println("local receive time out " +ex.getMessage());
                          localOk=false;
                          return defaultValue;
                }
     }
What is MATLAB? Does it generate executables?
https://stackoverflow.com/questions/453139/what-is-matlab-does-it-generate-executables | Tag: simulink

Votes: 10

It is, mostly, a simulation and mathematical calculation environment.

During my education, we used it for spectrum analyses, sound processing and image processing. It is great for experimenting with such things; and resonably fast if used correctly.

It does have some features, such as the Matlab compiler, that allows you to take Matlab code and compile it to an executable.

Programmatically Labeling a Signal in Simulink
https://stackoverflow.com/questions/13751280/programmatically-labeling-a-signal-in-simulink | Tag: simulink

Votes: 6

add_line returns a handle to the newly created line, so you could also write:

lineHandle = add_line('sys','oport','iport');
set_param(lineHandle, 'Name', 'yourSignalName');
How to save scope to an image file without using plot?
https://stackoverflow.com/questions/4393217/how-to-save-scope-to-an-image-file-without-using-plot | Tag: simulink

Votes: 5

If the comment by MikeT is correct, and you are trying to save the image shown in a Scope block, there are a couple of ways you could do this:

Print the contents of the scope window by clicking the Print icon, the leftmost icon on the Scope toolbar. Then choose to print to a file instead of to a printer.
Create an editable figure from a scope block using the SIMPLOT function. This will create a figure that looks like the display on the screen of a Scope block, then you can save the figure to a file using the figure window's File menu or the functions SAVEAS or PRINT.
How to declare global variables for simulink containing matlab functions?
https://stackoverflow.com/questions/30451729/how-to-declare-global-variables-for-simulink-containing-matlab-functions | Tag: simulink

Votes: 5

You need to either define your global variables as Simulink.Signal object or a Data Store Memory block and then define them as global in your MATLAB function. You cannot access the regular MATLAB variables from MATLAB workspace.

There is a detailed page about this on MAthworks website with a good example.

Is there something like a "pre-build" callback function?
https://stackoverflow.com/questions/25742533/is-there-something-like-a-pre-build-callback-function | Tag: simulink

Votes: 4

There are plenty of hooks into the build process of Simulink / Embedded Coder ('entry', 'before_tlc', 'after_tlc', 'before_make', 'after_make', 'exit', and 'error'). I assume you want an 'entry' hook.

All you need to do is write an M-function with the name your_system_target_file name_make_rtw_hook, as explained in the documentation Customize Build Process with STF_make_rtw_hook File.

In case you can't open the online documentation (login required), here is the path to the HTML in your MATLAB installation: MATLAB root\help\rtw\ug\customizing-the-target-build-process-with-the-stf-make-rtw-hook-file.html

Matlab to workspace and rms value different
https://stackoverflow.com/questions/18663103/matlab-to-workspace-and-rms-value-different | Tag: simulink

Votes: 3

Take the decimation as 1

See this link Matlab help link

For example, suppose you have a simulation where the start time is 0, the Limit data points to last is 100, the Decimation is 1, and the Sample time is 0.5. The To Workspace block collects a maximum of 100 points, at time values of 0, 0.5, 1.0, 1.5, ..., seconds. Specifying a Decimation value of 1 directs the block to write data at each step.

I took the decimation as 1 and I got same values in workspace and in matrix

testv

Programmatically open a Simulink MATLAB function block's code
https://stackoverflow.com/questions/53279284/programmatically-open-a-simulink-matlab-function-blocks-code | Tag: simulink

Votes: 4

You can open the code in the Editor using,

view(blockHandles(iHandle))
How to recompile model DLL without restarting MATLAB?
https://stackoverflow.com/questions/20661839/how-to-recompile-model-dll-without-restarting-matlab | Tag: simulink

Votes: 2

I think it would work if you just rename the actual DLL to something else and then recompile. I know it works for mex files. If this doesn't work, you can try this solution.

How to get location of signal name on signal line (MATLAB/Simulink)
https://stackoverflow.com/questions/19852758/how-to-get-location-of-signal-name-on-signal-line-matlab-simulink | Tag: simulink

Votes: 2

When you inspect your signal handle, you won't find any property changing, when you modify the signal position. So I would assume there is no simple way to do what you want. Maybe you can work with the underlying java objects, but it will complicated. (... and I can't help on that)

I assume you create your whole model programmatically, don't you? So you specify the exact position of your blocks and probably use the add_line command to draw the connections. Why not considering labeling the signals using annotations? You name your signal as before, but you don't make the label visible. Instead of this you use a programmatically generated annotation, like in the example of the documentation linked above:

new_system('test')
open_system('test')
add_block('built-in/Gain', 'test/Gain', 'Position', ...
[260, 125, 290, 155])
add_block('built-in/Note','test/programmatically created', ...
'Position', [550 0 0 180])
enter image description here

Force redraw of model icon
https://stackoverflow.com/questions/24388278/force-redraw-of-model-icon | Tag: simulink

Votes: 1

The answer to this was to create a new mask on the target block to be redrawn and add a variable in the parameter tab.

I called my variable 'onSettingsChanged' to be an event handler, set it as Type: edit, Evaluate: off, Tunable: on.

In the event source mask under the Initialisation tab, I call set_param on all the other masks' 'onSettingsChanged' value. When they get written with a different value from previous, this causes their mask to redraw.

TortoiseGit, configure automatic merge tool on per-file-basis
https://stackoverflow.com/questions/9296785/tortoisegit-configure-automatic-merge-tool-on-per-file-basis | Tag: simulink

Votes: 1

Go to TortoiseGit settings -> Diff viewer -> Merge. There click on the Advanced button. Here you can configure different merge tools for specific file types.

Simulink Project dependency management and dependency resolution
https://stackoverflow.com/questions/35927370/simulink-project-dependency-management-and-dependency-resolution | Tag: simulink

Votes: 0

I've spent much time on this problem. Finally I didn't find an appropriate solution online, but I'd like to share the workflow we are using now and which fulfills our needs.

In short: We created our own dependency management by using git submodules.

Assumption: In fact, it is more a version management of persistent dependencies rather than offering the possibility to dynamically add new or remove old packages or libraries. This also works, but requires the git submodules to be added to or removed from the main git repository.

Objectives:

Consistent setup for everyone who works on the project.
Traceability of depdendencies.
Continous Integration with less effort.
How we do it (Example):

We have Project A and Project B which shall be used in Project C.
All three projects are under git version control and still under development.
We have set up additional release repositories for Project A and Project B, e.g. located on a network drive.
In Project C we add the release repositories of Project A and Project B as git submodules
We have set up some kind of auto-deployment to push only relevant files into these release repositories. For example if we want to make changes of Project B accessible to Project C, we only create a version tag in Project B's repository and it gets pushed to its release repository.
In Project C we update our git submodules and can checkout a new submodule version (if needed).
Advantages:

Since git stores the checked out version (commit) of git submodules in the main project, we can ensure that everyone works with the same files.
Changing the commit of a submodule is traceable in the main project.
The relation between the main project and the dependencies is always consistent.
Continuous Integration should work "out of the box". We are using GitLab and GitLab Runner and only had to setup our runner to fetch submodules recursively (in case of nested submodules).
I think this approach works as long as the repositories won't get too big, since you do not fetch only the version you need but also the whole version history.

Matlab C++ S-Function with multiple source files
https://stackoverflow.com/questions/28325342/matlab-c-s-function-with-multiple-source-files | Tag: simulink

Votes: 0

as far as I know, there is no makefile-like system for the MEX compiler in MATLAB. For large projects like yours, I recommend using the CMake generator tool alongside the MATLAB MEX compiler. There is a guide available on MATLAB Central mex-cmake that details the procedure.

If a significant portion of your project does not involve MEX includes, i recommend to refactor it to a separate c/c++ codebase and a MEX-interface that include your c++ headers, then compiling it into a static library (*.lib or *.a) and write a custom wrapper using a MEX file for the entire codebase. This way, you can create a separate development interface for your C/C++ code and compile it via the Command Prompt using the following command:

mex matlab_interface.cpp -I<include_paths> -L<library_path> -l<library_name>
Append Signal to Bus in Simulink
https://stackoverflow.com/questions/19579048/append-signal-to-bus-in-simulink | Tag: simulink

Votes: 0

If you are using a bus object, you can use the Bus Editor to add a bus element to an existing bus.

How can I adjust the display of IO ports on a subsystem block in Simulink?
https://stackoverflow.com/questions/5304446/how-can-i-adjust-the-display-of-io-ports-on-a-subsystem-block-in-simulink | Tag: simulink

Votes: 0

One option is to use a Mux (or perhaps a bus) signal to collect the input channels into just one input. With fewer inputs, it will be easier to distinguish them if they are all on the same side. Also, don't forget to label your input ports.
